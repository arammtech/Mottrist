// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mottrist.Repository.EntityFrameworkCore.Context;

#nullable disable

namespace Mottrist.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503182510_add-CountriesSeeData")]
    partial class addCountriesSeeData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AvailableTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailableAllTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicenseImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("YearsOfExperience")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Drivers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyTypes", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Type = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Coupe"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Pickup"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Convertible"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Wagon"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Minivan"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Roadster"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Crossover"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Limousine"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Van"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Sports Car"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Luxury Sedan"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Coupe Convertible"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Station Wagon"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Supercar"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Hypercar"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Off-road"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Targa"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Subaru"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Lexus"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Jaguar"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Land Rover"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Lamborghini"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAirCondiations")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWiFi")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("NumberOfSeats")
                        .HasColumnType("tinyint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("Cars", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyTypeId = 1,
                            BrandId = 1,
                            ColorId = 1,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)5,
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            BodyTypeId = 2,
                            BrandId = 2,
                            ColorId = 2,
                            FuelTypeId = 2,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)7,
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            BodyTypeId = 1,
                            BrandId = 1,
                            ColorId = 1,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)5,
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            BodyTypeId = 2,
                            BrandId = 2,
                            ColorId = 2,
                            FuelTypeId = 2,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)7,
                            Year = 2021
                        },
                        new
                        {
                            Id = 5,
                            BodyTypeId = 3,
                            BrandId = 3,
                            ColorId = 3,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)4,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages", "Vehicles");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 4,
                            Name = "White"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Beige"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Turquoise"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Teal"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Magenta"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Copper"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ivory"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Champagne"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Petrol"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Hybrid"
                        },
                        new
                        {
                            Id = 5,
                            Type = "CNG"
                        },
                        new
                        {
                            Id = 6,
                            Type = "LPG"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Ethanol"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Biofuel"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Hydrogen"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Propane"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Methanol"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Butanol"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Natural Gas"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Biodiesel"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Alcohol"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Fischer-Tropsch"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Electric + Petrol"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Electric + Diesel"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Electric + Hydrogen"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Compressed Natural Gas (CNG)"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Destinations", "Geography");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.DriverInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("DriverInteractions", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Traveler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PreferredLanguageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Travellers", "Travellers");
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Traveler",
                            NormalizedName = "TRAVELER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Geography");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Geography");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 6,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 7,
                            Name = "France"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 11,
                            Name = "China"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 13,
                            Name = "India"
                        },
                        new
                        {
                            Id = 14,
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 17,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 22,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 51,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 54,
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 73,
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Ivory Coast"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Cameroon"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<byte>("WorkStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCities", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<byte>("WorkStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCountries", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DriverLanguages", "Localization");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages", "Localization");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 3,
                            Name = "French"
                        },
                        new
                        {
                            Id = 4,
                            Name = "German"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Arabic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Portuguese"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hindi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bengali"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Urdu"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Dutch"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Greek"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Turkish"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Korean"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Vietnamese"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Finnish"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Hebrew"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Malay"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Indonesian"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Thai"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Hungarian"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Czech"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Romanian"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Bulgarian"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Persian"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Swahili"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Filipino"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Tamil"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Telugu"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Marathi"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Serbian"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Croatian"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Slovak"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Danish"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Norwegian"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Macedonian"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Pashto"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Sinhala"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Mongolian"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Basque"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Catalan"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Malagasy"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Kurdish"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Tatar"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Belarusian"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Welsh"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Irish"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Yiddish"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Nepali"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Javanese"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Sundanese"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Gujarati"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Haitian Creole"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Zulu"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Xhosa"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Hausa"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Igbo"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Samoan"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Māori"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Tibetan"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Lao"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Burmese"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Khmer"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Twi"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Amharic"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Tigrinya"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Maldivian"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Oromo"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Fula"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Chichewa"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Bambara"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Tswana"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Shona"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Sesotho"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Wolof"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Dzongkha"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Kanuri"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Ga"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Acholi"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Ewe"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Bislama"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Tok Pisin"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Nauruan"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Chamorro"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Palauan"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Tuvaluan"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Marshallese"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Tetum"
                        });
                });

            modelBuilder.Entity("Driver", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Car", "Car")
                        .WithOne()
                        .HasForeignKey("Driver", "CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.BodyType", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.CarImage", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Destination", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany("Destinations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.DriverInteraction", b =>
                {
                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverInteractions")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithMany("DriverInteractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Message", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Traveler", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.LookupEntities.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId");

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("Mottrist.Domain.Entities.Traveler", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("PreferredLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCity", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany("DriverCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverCities")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCountry", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("DriverCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverCountries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverLanguage", b =>
                {
                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverLanguages")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.LookupEntities.Language", "Language")
                        .WithMany("DriverLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Driver", b =>
                {
                    b.Navigation("DriverCities");

                    b.Navigation("DriverCountries");

                    b.Navigation("DriverInteractions");

                    b.Navigation("DriverLanguages");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.Navigation("CarImages");
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DriverInteractions");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("DriverCities");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("DriverCountries");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Language", b =>
                {
                    b.Navigation("DriverLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
