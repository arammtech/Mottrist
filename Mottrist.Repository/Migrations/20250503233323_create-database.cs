using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace Mottrist.Repository.Migrations
{
    /// <inheritdoc />
    public partial class createdatabase : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "Vehicle");

            migrationBuilder.EnsureSchema(
                name: "Vehicles");

            migrationBuilder.EnsureSchema(
                name: "Geography");

            migrationBuilder.EnsureSchema(
                name: "Drivers");

            migrationBuilder.EnsureSchema(
                name: "Localization");

            migrationBuilder.EnsureSchema(
                name: "Travellers");

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsAdmin = table.Column<bool>(type: "bit", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BodyTypes",
                schema: "Vehicle",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BodyTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Brands",
                schema: "Vehicles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Brands", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Colors",
                schema: "Vehicles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                schema: "Geography",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FuelTypes",
                schema: "Vehicles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Languages",
                schema: "Localization",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Languages", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<int>(type: "int", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RoleId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "int", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Messages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    MessageBody = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Messages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Messages_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cities",
                schema: "Geography",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cities", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cities_Countries_CountryId",
                        column: x => x.CountryId,
                        principalSchema: "Geography",
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Cars",
                schema: "Vehicles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Year = table.Column<int>(type: "int", nullable: false),
                    NumberOfSeats = table.Column<byte>(type: "tinyint", nullable: false),
                    HasWiFi = table.Column<bool>(type: "bit", nullable: false),
                    HasAirCondiations = table.Column<bool>(type: "bit", nullable: false),
                    BrandId = table.Column<int>(type: "int", nullable: false),
                    Model = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: false),
                    BodyTypeId = table.Column<int>(type: "int", nullable: false),
                    FuelTypeId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cars", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cars_BodyTypes_BodyTypeId",
                        column: x => x.BodyTypeId,
                        principalSchema: "Vehicle",
                        principalTable: "BodyTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Cars_Brands_BrandId",
                        column: x => x.BrandId,
                        principalSchema: "Vehicles",
                        principalTable: "Brands",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Cars_Colors_ColorId",
                        column: x => x.ColorId,
                        principalSchema: "Vehicles",
                        principalTable: "Colors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Cars_FuelTypes_FuelTypeId",
                        column: x => x.FuelTypeId,
                        principalSchema: "Vehicles",
                        principalTable: "FuelTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Destinations",
                schema: "Geography",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CityId = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Destinations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Destinations_Cities_CityId",
                        column: x => x.CityId,
                        principalSchema: "Geography",
                        principalTable: "Cities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Travellers",
                schema: "Travellers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WhatsAppNumber = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    NationalityId = table.Column<int>(type: "int", nullable: false),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    ProfileImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PreferredLanguageId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Travellers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Travellers_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Travellers_Cities_CityId",
                        column: x => x.CityId,
                        principalSchema: "Geography",
                        principalTable: "Cities",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Travellers_Countries_NationalityId",
                        column: x => x.NationalityId,
                        principalSchema: "Geography",
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Travellers_Languages_PreferredLanguageId",
                        column: x => x.PreferredLanguageId,
                        principalSchema: "Localization",
                        principalTable: "Languages",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "CarImages",
                schema: "Vehicles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CarId = table.Column<int>(type: "int", nullable: false),
                    IsMain = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CarImages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CarImages_Cars_CarId",
                        column: x => x.CarId,
                        principalSchema: "Vehicles",
                        principalTable: "Cars",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Drivers",
                schema: "Drivers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    WhatsAppNumber = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    NationalityId = table.Column<int>(type: "int", nullable: false),
                    Bio = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    YearsOfExperience = table.Column<byte>(type: "tinyint", nullable: false),
                    CarId = table.Column<int>(type: "int", nullable: true),
                    AvailableFrom = table.Column<DateTime>(type: "datetime", nullable: true),
                    AvailableTo = table.Column<DateTime>(type: "datetime", nullable: true),
                    IsAvailableAllTime = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    PricePerHour = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false, defaultValue: (byte)2),
                    LicenseImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PassportImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProfileImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Drivers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Drivers_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Drivers_Cars_CarId",
                        column: x => x.CarId,
                        principalSchema: "Vehicles",
                        principalTable: "Cars",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Drivers_Countries_NationalityId",
                        column: x => x.NationalityId,
                        principalSchema: "Geography",
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DriverCities",
                schema: "Drivers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DriverId = table.Column<int>(type: "int", nullable: false),
                    CityId = table.Column<int>(type: "int", nullable: false),
                    WorkStatus = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriverCities", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DriverCities_Cities_CityId",
                        column: x => x.CityId,
                        principalSchema: "Geography",
                        principalTable: "Cities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DriverCities_Drivers_DriverId",
                        column: x => x.DriverId,
                        principalSchema: "Drivers",
                        principalTable: "Drivers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DriverCountries",
                schema: "Drivers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DriverId = table.Column<int>(type: "int", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    WorkStatus = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriverCountries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DriverCountries_Countries_CountryId",
                        column: x => x.CountryId,
                        principalSchema: "Geography",
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DriverCountries_Drivers_DriverId",
                        column: x => x.DriverId,
                        principalSchema: "Drivers",
                        principalTable: "Drivers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DriverInteractions",
                schema: "Drivers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DriverId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    IsLiked = table.Column<bool>(type: "bit", nullable: true),
                    ViewsCount = table.Column<int>(type: "int", nullable: false, defaultValue: 0)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriverInteractions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DriverInteractions_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DriverInteractions_Drivers_DriverId",
                        column: x => x.DriverId,
                        principalSchema: "Drivers",
                        principalTable: "Drivers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DriverLanguages",
                schema: "Localization",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DriverId = table.Column<int>(type: "int", nullable: false),
                    LanguageId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriverLanguages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DriverLanguages_Drivers_DriverId",
                        column: x => x.DriverId,
                        principalSchema: "Drivers",
                        principalTable: "Drivers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DriverLanguages_Languages_LanguageId",
                        column: x => x.LanguageId,
                        principalSchema: "Localization",
                        principalTable: "Languages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.InsertData(
                table: "AspNetRoles",
                columns: new[] { "Id", "ConcurrencyStamp", "Name", "NormalizedName" },
                values: new object[,]
                {
                    { 1, null, "Admin", "ADMIN" },
                    { 2, null, "Driver", "DRIVER" },
                    { 3, null, "Traveler", "TRAVELER" },
                    { 4, null, "Employee", "EMPLOYEE" }
                });

            migrationBuilder.InsertData(
                schema: "Vehicle",
                table: "BodyTypes",
                columns: new[] { "Id", "Type" },
                values: new object[,]
                {
                    { 1, "Sedan" },
                    { 2, "SUV" },
                    { 3, "Hatchback" },
                    { 4, "Coupe" },
                    { 5, "Convertible" },
                    { 6, "Minivan" },
                    { 7, "Crossover" },
                    { 8, "Electric Car" },
                    { 9, "Hybrid Car" },
                    { 10, "Sports Car" },
                    { 11, "Roadster" },
                    { 12, "Pony Car" },
                    { 13, "Muscle Car" },
                    { 14, "Supercar" },
                    { 15, "Hypercar" },
                    { 16, "Minicar" },
                    { 17, "Subcompact Car" },
                    { 18, "Compact Car" },
                    { 19, "Mid-Size Car" },
                    { 20, "Full-Size Car" },
                    { 21, "Luxury Car" },
                    { 22, "Grand Tourer" },
                    { 23, "Fastback" },
                    { 24, "Notchback" },
                    { 25, "Hardtop" },
                    { 26, "Targa Top" },
                    { 27, "Landau" },
                    { 28, "Shooting Brake" },
                    { 29, "Estate Car" },
                    { 30, "Liftback" },
                    { 31, "Kammback" },
                    { 32, "Bubble Car" },
                    { 33, "Microcar" },
                    { 34, "City Car" },
                    { 35, "Subcompact MPV" },
                    { 36, "Compact MPV" },
                    { 37, "Large MPV" },
                    { 38, "Panel Van" },
                    { 39, "Pickup SUV" },
                    { 40, "Coupe SUV" },
                    { 41, "Off-Road SUV" },
                    { 42, "Luxury SUV" },
                    { 43, "Performance SUV" },
                    { 44, "Electric SUV" },
                    { 45, "Hybrid SUV" },
                    { 46, "Extended Length SUV" },
                    { 47, "Three-Row SUV" },
                    { 48, "Two-Row SUV" },
                    { 49, "Compact Crossover SUV" },
                    { 50, "Mid-Size Crossover SUV" },
                    { 51, "Full-Size Crossover SUV" },
                    { 52, "Convertible SUV" },
                    { 53, "T-Top" },
                    { 54, "Phaeton" },
                    { 55, "Barchetta" },
                    { 56, "Spider" },
                    { 57, "Cabriolet" },
                    { 58, "Drophead Coupé" },
                    { 59, "Roadster Utility" },
                    { 60, "Club Coupe" },
                    { 61, "Opera Coupe" },
                    { 62, "Business Coupe" },
                    { 63, "Personal Luxury Coupe" },
                    { 64, "Four-Door Coupe" },
                    { 65, "Compact Executive Car" },
                    { 66, "Executive Car" },
                    { 67, "Luxury Sedan" },
                    { 68, "Full-Size Luxury Sedan" },
                    { 69, "Performance Sedan" },
                    { 70, "Sports Sedan" },
                    { 71, "Touring Sedan" },
                    { 72, "Wagon Sedan" },
                    { 73, "Fastback Sedan" },
                    { 74, "Notchback Sedan" },
                    { 75, "Hardtop Sedan" },
                    { 76, "Pillarless Hardtop" },
                    { 77, "Long-Wheelbase Sedan" },
                    { 78, "Short-Wheelbase Sedan" },
                    { 79, "Hybrid Electric Sedan" },
                    { 80, "Compact Luxury Sedan" },
                    { 81, "Mid-Size Luxury Sedan" },
                    { 82, "Subcompact Luxury SUV" },
                    { 83, "Compact Luxury SUV" },
                    { 84, "Mid-Size Luxury SUV" },
                    { 85, "Full-Size Luxury SUV" },
                    { 86, "Retro Sedan" },
                    { 87, "Retro Coupe" },
                    { 88, "Soft-Top Convertible" },
                    { 89, "Hardtop Convertible" },
                    { 90, "Micro MPV" },
                    { 91, "Luxury Crossover" },
                    { 92, "Performance Crossover" },
                    { 93, "Electric Crossover" },
                    { 94, "Hybrid Crossover" },
                    { 95, "Compact Performance Car" },
                    { 96, "Mid-Size Performance Car" },
                    { 97, "Luxury Performance Car" },
                    { 98, "Electric Performance Car" },
                    { 99, "Hybrid Performance Car" },
                    { 100, "Subcompact Hatchback" },
                    { 101, "Compact Hatchback" },
                    { 102, "Mid-Size Hatchback" },
                    { 103, "Luxury Hatchback" },
                    { 104, "Performance Hatchback" },
                    { 105, "Electric Hatchback" },
                    { 106, "Hybrid Hatchback" },
                    { 107, "Subcompact Coupe" },
                    { 108, "Compact Coupe" },
                    { 109, "Mid-Size Coupe" },
                    { 110, "Luxury Coupe" },
                    { 111, "Performance Coupe" },
                    { 112, "Electric Coupe" },
                    { 113, "Hybrid Coupe" },
                    { 114, "Subcompact Convertible" },
                    { 115, "Compact Convertible" },
                    { 116, "Mid-Size Convertible" },
                    { 117, "Luxury Convertible" },
                    { 118, "Performance Convertible" },
                    { 119, "Electric Convertible" },
                    { 120, "Hybrid Convertible" },
                    { 121, "Compact Wagon" },
                    { 122, "Mid-Size Wagon" },
                    { 123, "Full-Size Wagon" },
                    { 124, "Luxury Wagon" },
                    { 125, "Performance Wagon" },
                    { 126, "Electric Wagon" },
                    { 127, "Hybrid Wagon" },
                    { 128, "Subcompact Crossover" },
                    { 129, "Adventure SUV" },
                    { 130, "Retro SUV" },
                    { 131, "Urban SUV" },
                    { 132, "Compact Off-Road SUV" },
                    { 133, "Mid-Size Off-Road SUV" },
                    { 134, "Luxury Off-Road SUV" },
                    { 135, "Performance Off-Road SUV" },
                    { 136, "Electric Off-Road SUV" },
                    { 137, "Hybrid Off-Road SUV" },
                    { 138, "Micro Crossover" },
                    { 139, "Subcompact Performance SUV" },
                    { 140, "Mid-Size Performance SUV" },
                    { 141, "Full-Size Performance SUV" },
                    { 142, "Luxury Performance SUV" },
                    { 143, "Compact Hybrid SUV" },
                    { 144, "Full-Size Hybrid SUV" },
                    { 145, "Compact Electric SUV" },
                    { 146, "Mid-Size Electric SUV" },
                    { 147, "Full-Size Electric SUV" },
                    { 148, "Luxury Electric SUV" },
                    { 149, "Retro Hatchback" },
                    { 150, "Concept Car" }
                });

            migrationBuilder.InsertData(
                schema: "Vehicles",
                table: "Brands",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "Toyota" },
                    { 2, "Honda" },
                    { 3, "Ford" },
                    { 4, "Chevrolet" },
                    { 5, "Nissan" },
                    { 6, "Volkswagen" },
                    { 7, "BMW" },
                    { 8, "Mercedes-Benz" },
                    { 9, "Audi" },
                    { 10, "Hyundai" },
                    { 11, "Kia" },
                    { 12, "Renault" },
                    { 13, "Peugeot" },
                    { 14, "Fiat" },
                    { 15, "Mazda" },
                    { 16, "Subaru" },
                    { 17, "Suzuki" },
                    { 18, "Mitsubishi" },
                    { 19, "Volvo" },
                    { 20, "Tesla" },
                    { 21, "Jeep" },
                    { 22, "Land Rover" },
                    { 23, "Porsche" },
                    { 24, "Ferrari" },
                    { 25, "Lamborghini" },
                    { 26, "Aston Martin" },
                    { 27, "Bentley" },
                    { 28, "Rolls-Royce" },
                    { 29, "Bugatti" },
                    { 30, "Chrysler" },
                    { 31, "Dodge" },
                    { 32, "GMC" },
                    { 33, "Cadillac" },
                    { 34, "Lincoln" },
                    { 35, "Buick" },
                    { 36, "Opel" },
                    { 37, "Saab" },
                    { 38, "Skoda" },
                    { 39, "Seat" },
                    { 40, "Citroën" },
                    { 41, "Alfa Romeo" },
                    { 42, "Lancia" },
                    { 43, "Daewoo" },
                    { 44, "SsangYong" },
                    { 45, "Tata Motors" },
                    { 46, "Mahindra" },
                    { 47, "Hindustan Motors" },
                    { 48, "Maruti Suzuki" },
                    { 49, "Isuzu" },
                    { 50, "Daihatsu" },
                    { 51, "Hino Motors" },
                    { 52, "Lexus" },
                    { 53, "Infiniti" },
                    { 54, "Acura" },
                    { 55, "Scion" },
                    { 56, "Genesis" },
                    { 57, "Smart" },
                    { 58, "Mini" },
                    { 59, "Jaguar" },
                    { 60, "Lotus" },
                    { 61, "MG" },
                    { 62, "Rover" },
                    { 63, "Austin" },
                    { 64, "Morris" },
                    { 65, "Vauxhall" },
                    { 66, "Holden" },
                    { 67, "FPV" },
                    { 68, "HSV" },
                    { 69, "Proton" },
                    { 70, "Perodua" },
                    { 71, "Chery" },
                    { 72, "Geely" },
                    { 73, "BYD" },
                    { 74, "Great Wall Motors" },
                    { 75, "FAW" },
                    { 76, "Changan" },
                    { 77, "Dongfeng" },
                    { 78, "BAIC" },
                    { 79, "JAC" },
                    { 80, "Zotye" },
                    { 81, "Landwind" },
                    { 82, "Hawtai" },
                    { 83, "Soueast" },
                    { 84, "Brilliance" },
                    { 85, "Roewe" },
                    { 86, "MG Motor India" },
                    { 87, "Force Motors" },
                    { 88, "Premier Ltd." },
                    { 89, "Ram" },
                    { 90, "SRT" },
                    { 91, "Hummer" },
                    { 92, "SML Isuzu" },
                    { 93, "Ashok Leyland" },
                    { 94, "Eicher Motors" },
                    { 95, "Piaggio" },
                    { 96, "Bajaj Auto" },
                    { 97, "TVS Motors" },
                    { 98, "Hero MotoCorp" },
                    { 99, "Yamaha Motor Company" },
                    { 100, "Suzuki Motorcycles" },
                    { 101, "Kawasaki" },
                    { 102, "Ducati" },
                    { 103, "Harley-Davidson" },
                    { 104, "Triumph" },
                    { 105, "KTM" },
                    { 106, "Aprilia" },
                    { 107, "Vespa" },
                    { 108, "Royal Enfield" },
                    { 109, "Benelli" },
                    { 110, "Moto Guzzi" },
                    { 111, "Husqvarna" },
                    { 112, "Indian Motorcycle" },
                    { 113, "MV Agusta" },
                    { 114, "Bimota" },
                    { 115, "Norton" },
                    { 116, "Zero Motorcycles" },
                    { 117, "CFMoto" },
                    { 118, "Ural" },
                    { 119, "Victory Motorcycles" },
                    { 120, "Sym" },
                    { 121, "Kymco" },
                    { 122, "PGO Scooters" },
                    { 123, "Lifan" },
                    { 124, "Haojue" },
                    { 125, "QJMotor" },
                    { 126, "Zongshen" },
                    { 127, "Loncin" },
                    { 128, "Dayun" },
                    { 129, "Jincheng" },
                    { 130, "Shineray" },
                    { 131, "Daelim" },
                    { 132, "Hyosung" },
                    { 133, "Keeway" },
                    { 134, "Super Soco" },
                    { 135, "Energica" },
                    { 136, "Arcimoto" },
                    { 137, "Rivian" },
                    { 138, "Lucid Motors" },
                    { 139, "Fisker" },
                    { 140, "NIO" },
                    { 141, "XPeng" },
                    { 142, "Li Auto" },
                    { 143, "Polestar" },
                    { 144, "VinFast" },
                    { 145, "Sono Motors" },
                    { 146, "Lightyear" },
                    { 147, "Aptera Motors" },
                    { 148, "Faraday Future" },
                    { 149, "Lordstown Motors" },
                    { 150, "Canoo" },
                    { 151, "Bollinger Motors" },
                    { 152, "ElectraMeccanica" },
                    { 153, "Pininfarina" },
                    { 154, "Maserati" },
                    { 155, "McLaren" },
                    { 156, "Pagani" },
                    { 157, "Koenigsegg" },
                    { 158, "Rimac" },
                    { 159, "Spyker" },
                    { 160, "De Tomaso" },
                    { 161, "Hispano Suiza" },
                    { 162, "DS Automobiles" },
                    { 163, "Saleen" },
                    { 164, "Iveco" },
                    { 165, "MAN" },
                    { 166, "Scania" },
                    { 167, "DAF" },
                    { 168, "Navistar" },
                    { 169, "Paccar" },
                    { 170, "Kenworth" },
                    { 171, "Peterbilt" },
                    { 172, "Freightliner" },
                    { 173, "Mack Trucks" },
                    { 174, "Western Star" },
                    { 175, "Volvo Trucks" },
                    { 176, "Renault Trucks" },
                    { 177, "Tatra" },
                    { 178, "Kamaz" },
                    { 179, "UralAZ" },
                    { 180, "GAZ" },
                    { 181, "ZIL" },
                    { 182, "MAZ" },
                    { 183, "KrAZ" },
                    { 184, "BelAZ" },
                    { 185, "Sinotruk" },
                    { 186, "Foton" },
                    { 187, "Shacman" },
                    { 188, "Howo" },
                    { 189, "Yutong" },
                    { 190, "King Long" },
                    { 191, "Golden Dragon" },
                    { 192, "Higer" },
                    { 193, "Ankai" },
                    { 194, "Sollers" },
                    { 195, "Avtovaz" },
                    { 196, "Lada" },
                    { 197, "UAZ" },
                    { 198, "Moskvitch" },
                    { 199, "Dacia" },
                    { 200, "International Harvester" }
                });

            migrationBuilder.InsertData(
                schema: "Vehicles",
                table: "Colors",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "Red" },
                    { 2, "Blue" },
                    { 3, "Green" },
                    { 4, "Black" },
                    { 5, "White" },
                    { 6, "Silver" },
                    { 7, "Gray" },
                    { 8, "Yellow" },
                    { 9, "Brown" },
                    { 10, "Purple" },
                    { 11, "Candy Apple Red" },
                    { 12, "Midnight Blue" },
                    { 13, "Forest Green" },
                    { 14, "Jet Black" },
                    { 15, "Pearl White" },
                    { 16, "Metallic Silver" },
                    { 17, "Slate Gray" },
                    { 18, "Sunburst Yellow" },
                    { 19, "Mocha Brown" },
                    { 20, "Vivid Purple" },
                    { 21, "Ruby Red" },
                    { 22, "Sapphire Blue" },
                    { 23, "Emerald Green" },
                    { 24, "Obsidian Black" },
                    { 25, "Ivory White" },
                    { 26, "Titanium Silver" },
                    { 27, "Charcoal Gray" },
                    { 28, "Canary Yellow" },
                    { 29, "Chocolate Brown" },
                    { 30, "Amethyst Purple" },
                    { 31, "Crimson Red" },
                    { 32, "Navy Blue" },
                    { 33, "Olive Green" },
                    { 34, "Onyx Black" },
                    { 35, "Cream White" },
                    { 36, "Platinum Silver" },
                    { 37, "Gunmetal Gray" },
                    { 38, "Lemon Yellow" },
                    { 39, "Espresso Brown" },
                    { 40, "Plum Purple" },
                    { 41, "Fire Engine Red" },
                    { 42, "Sky Blue" },
                    { 43, "Lime Green" },
                    { 44, "Matte Black" },
                    { 45, "Snow White" },
                    { 46, "Brushed Silver" },
                    { 47, "Steel Gray" },
                    { 48, "Mustard Yellow" },
                    { 49, "Caramel Brown" },
                    { 50, "Violet Purple" },
                    { 51, "Cherry Red" },
                    { 52, "Cobalt Blue" },
                    { 53, "Mint Green" },
                    { 54, "Ebony Black" },
                    { 55, "Alabaster White" },
                    { 56, "Chrome Silver" },
                    { 57, "Pewter Gray" },
                    { 58, "Saffron Yellow" },
                    { 59, "Walnut Brown" },
                    { 60, "Lilac Purple" },
                    { 61, "Scarlet Red" },
                    { 62, "Aqua Blue" },
                    { 63, "Jade Green" },
                    { 64, "Satin Black" },
                    { 65, "Chalk White" },
                    { 66, "Liquid Silver" },
                    { 67, "Iron Gray" },
                    { 68, "Amber Yellow" },
                    { 69, "Hazelnut Brown" },
                    { 70, "Orchid Purple" },
                    { 71, "Burgundy Red" },
                    { 72, "Turquoise Blue" },
                    { 73, "Sage Green" },
                    { 74, "Gloss Black" },
                    { 75, "Eggshell White" },
                    { 76, "Polished Silver" },
                    { 77, "Ash Gray" },
                    { 78, "Golden Yellow" },
                    { 79, "Cocoa Brown" },
                    { 80, "Magenta Purple" },
                    { 81, "Maroon Red" },
                    { 82, "Cerulean Blue" },
                    { 83, "Pine Green" },
                    { 84, "Raven Black" },
                    { 85, "Porcelain White" },
                    { 86, "Sterling Silver" },
                    { 87, "Smoke Gray" },
                    { 88, "Honey Yellow" },
                    { 89, "Truffle Brown" },
                    { 90, "Fuchsia Purple" },
                    { 91, "Coral Red" },
                    { 92, "Teal Blue" },
                    { 93, "Moss Green" },
                    { 94, "Carbon Black" },
                    { 95, "Milky White" },
                    { 96, "Quicksilver" },
                    { 97, "Granite Gray" },
                    { 98, "Butter Yellow" },
                    { 99, "Sienna Brown" },
                    { 100, "Indigo Purple" },
                    { 101, "Vermilion Red" },
                    { 102, "Azure Blue" },
                    { 103, "Fern Green" },
                    { 104, "Midnight Black" },
                    { 105, "Opal White" },
                    { 106, "Iridescent Silver" },
                    { 107, "Basalt Gray" },
                    { 108, "Dandelion Yellow" },
                    { 109, "Mahogany Brown" },
                    { 110, "Eggplant Purple" },
                    { 111, "Garnet Red" },
                    { 112, "Ocean Blue" },
                    { 113, "Kelly Green" },
                    { 114, "Shadow Black" },
                    { 115, "Frost White" },
                    { 116, "Mercury Silver" },
                    { 117, "Flint Gray" },
                    { 118, "Mango Yellow" },
                    { 119, "Cedar Brown" },
                    { 120, "Lavender Purple" },
                    { 121, "Brick Red" },
                    { 122, "Denim Blue" },
                    { 123, "Shamrock Green" },
                    { 124, "Pitch Black" },
                    { 125, "Linen White" },
                    { 126, "Aluminum Silver" },
                    { 127, "Storm Gray" },
                    { 128, "Tangerine Yellow" },
                    { 129, "Teak Brown" },
                    { 130, "Mauve Purple" },
                    { 131, "Rose Red" },
                    { 132, "Glacier Blue" },
                    { 133, "Cypress Green" },
                    { 134, "Coal Black" },
                    { 135, "Marble White" },
                    { 136, "Nickel Silver" },
                    { 137, "Mist Gray" },
                    { 138, "Banana Yellow" },
                    { 139, "Pecan Brown" },
                    { 140, "Grape Purple" },
                    { 141, "Salmon Red" },
                    { 142, "Lagoon Blue" },
                    { 143, "Spruce Green" },
                    { 144, "Velvet Black" },
                    { 145, "Bone White" },
                    { 146, "Pewter Silver" },
                    { 147, "Fog Gray" },
                    { 148, "Pumpkin Yellow" },
                    { 149, "Oak Brown" },
                    { 150, "Berry Purple" },
                    { 151, "Tomato Red" },
                    { 152, "Powder Blue" },
                    { 153, "Avocado Green" },
                    { 154, "Smoky Black" },
                    { 155, "Cotton White" },
                    { 156, "Zinc Silver" },
                    { 157, "Cloud Gray" },
                    { 158, "Apricot Yellow" },
                    { 159, "Chestnut Brown" },
                    { 160, "Raspberry Purple" },
                    { 161, "Blood Red" },
                    { 162, "Periwinkle Blue" },
                    { 163, "Basil Green" },
                    { 164, "Graphite Black" },
                    { 165, "Seashell White" },
                    { 166, "Tin Silver" },
                    { 167, "Dusk Gray" },
                    { 168, "Peach Yellow" },
                    { 169, "Maple Brown" },
                    { 170, "Blackberry Purple" },
                    { 171, "Cardinal Red" },
                    { 172, "Cornflower Blue" },
                    { 173, "Thyme Green" },
                    { 174, "Anthracite Black" },
                    { 175, "Vanilla White" },
                    { 176, "Steel Silver" },
                    { 177, "Haze Gray" },
                    { 178, "Citron Yellow" },
                    { 179, "Acorn Brown" },
                    { 180, "Mulberry Purple" },
                    { 181, "Chili Red" },
                    { 182, "Robin Egg Blue" },
                    { 183, "Celery Green" },
                    { 184, "Soot Black" },
                    { 185, "Parchment White" },
                    { 186, "Cadmium Silver" },
                    { 187, "Shale Gray" },
                    { 188, "Marigold Yellow" },
                    { 189, "Bark Brown" },
                    { 190, "Boysenberry Purple" },
                    { 191, "Poppy Red" },
                    { 192, "Baby Blue" },
                    { 193, "Pistachio Green" },
                    { 194, "Ink Black" },
                    { 195, "Quartz White" },
                    { 196, "Mithril Silver" },
                    { 197, "Cinder Gray" },
                    { 198, "Ginger Yellow" },
                    { 199, "Saddle Brown" },
                    { 200, "Concord Purple" },
                    { 201, "Sangria Red" },
                    { 202, "Peacock Blue" },
                    { 203, "Parrot Green" },
                    { 204, "Caviar Black" },
                    { 205, "Lace White" },
                    { 206, "Bismuth Silver" },
                    { 207, "Driftwood Gray" },
                    { 208, "Papaya Yellow" },
                    { 209, "Rosewood Brown" },
                    { 210, "Huckleberry Purple" },
                    { 211, "Flamingo Pink" },
                    { 212, "Arctic Blue" },
                    { 213, "Seafoam Green" },
                    { 214, "Phantom Black" },
                    { 215, "Dove White" },
                    { 216, "Tungsten Silver" },
                    { 217, "Boulder Gray" },
                    { 218, "Nectarine Orange" },
                    { 219, "Ebony Brown" },
                    { 220, "Wisteria Purple" }
                });

            migrationBuilder.InsertData(
                schema: "Geography",
                table: "Countries",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "United States" },
                    { 2, "Canada" },
                    { 3, "Mexico" },
                    { 4, "Brazil" },
                    { 5, "Argentina" },
                    { 6, "United Kingdom" },
                    { 7, "France" },
                    { 8, "Germany" },
                    { 9, "Italy" },
                    { 10, "Spain" },
                    { 11, "China" },
                    { 12, "Japan" },
                    { 13, "India" },
                    { 14, "South Korea" },
                    { 15, "Indonesia" },
                    { 16, "Russia" },
                    { 17, "South Africa" },
                    { 18, "Egypt" },
                    { 19, "Nigeria" },
                    { 20, "Kenya" },
                    { 21, "Australia" },
                    { 22, "New Zealand" },
                    { 23, "Saudi Arabia" },
                    { 24, "Turkey" },
                    { 25, "Pakistan" },
                    { 26, "Bangladesh" },
                    { 27, "Vietnam" },
                    { 28, "Thailand" },
                    { 29, "Iran" },
                    { 30, "Israel" },
                    { 31, "Malaysia" },
                    { 32, "Philippines" },
                    { 33, "Portugal" },
                    { 34, "Greece" },
                    { 35, "Netherlands" },
                    { 36, "Sweden" },
                    { 37, "Norway" },
                    { 38, "Denmark" },
                    { 39, "Switzerland" },
                    { 40, "Poland" },
                    { 41, "Belgium" },
                    { 42, "Romania" },
                    { 43, "Czech Republic" },
                    { 44, "Hungary" },
                    { 45, "Ukraine" },
                    { 46, "Colombia" },
                    { 47, "Chile" },
                    { 48, "Peru" },
                    { 49, "Venezuela" },
                    { 50, "Ecuador" },
                    { 51, "United Arab Emirates" },
                    { 52, "Singapore" },
                    { 53, "Qatar" },
                    { 54, "South Sudan" },
                    { 55, "Myanmar" },
                    { 56, "Kazakhstan" },
                    { 57, "Algeria" },
                    { 58, "Morocco" },
                    { 59, "Tunisia" },
                    { 60, "Lebanon" },
                    { 61, "Jordan" },
                    { 62, "Sri Lanka" },
                    { 63, "Nepal" },
                    { 64, "Mongolia" },
                    { 65, "Uzbekistan" },
                    { 66, "Turkmenistan" },
                    { 67, "Bolivia" },
                    { 68, "Paraguay" },
                    { 69, "Uruguay" },
                    { 70, "Costa Rica" },
                    { 71, "Panama" },
                    { 72, "Honduras" },
                    { 73, "El Salvador" },
                    { 74, "Guatemala" },
                    { 75, "Dominican Republic" },
                    { 76, "Kuwait" },
                    { 77, "Bahrain" },
                    { 78, "Oman" },
                    { 79, "Iraq" },
                    { 80, "Syria" },
                    { 81, "Yemen" },
                    { 82, "Sudan" },
                    { 83, "Ethiopia" },
                    { 84, "Tanzania" },
                    { 85, "Zambia" },
                    { 86, "Zimbabwe" },
                    { 87, "Botswana" },
                    { 88, "Namibia" },
                    { 89, "Madagascar" },
                    { 90, "Papua New Guinea" },
                    { 91, "Fiji" },
                    { 92, "Solomon Islands" },
                    { 93, "Brunei" },
                    { 94, "Malawi" },
                    { 95, "Burundi" },
                    { 96, "Rwanda" },
                    { 97, "Ivory Coast" },
                    { 98, "Senegal" },
                    { 99, "Ghana" },
                    { 100, "Cameroon" }
                });

            migrationBuilder.InsertData(
                schema: "Vehicles",
                table: "FuelTypes",
                columns: new[] { "Id", "Type" },
                values: new object[,]
                {
                    { 1, "Petrol (Gasoline)" },
                    { 2, "Diesel" },
                    { 3, "Liquefied Petroleum Gas (LPG)" },
                    { 4, "Compressed Natural Gas (CNG)" },
                    { 5, "Natural Gas" },
                    { 6, "Kerosene" },
                    { 7, "Heavy Fuel Oil (HFO)" },
                    { 8, "Ethanol (E85, etc.)" },
                    { 9, "Biodiesel (B20, etc.)" },
                    { 10, "Biobutanol" },
                    { 11, "Biogas" },
                    { 12, "Electricity" },
                    { 13, "Hydrogen" },
                    { 14, "Green Hydrogen" },
                    { 15, "Synthetic Diesel" },
                    { 16, "Synthetic Gasoline" },
                    { 17, "E-Fuel" },
                    { 18, "Jet Fuel (Jet A, Jet A-1)" },
                    { 19, "Avgas" },
                    { 20, "Propane" },
                    { 21, "Methanol" }
                });

            migrationBuilder.InsertData(
                schema: "Localization",
                table: "Languages",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "English" },
                    { 2, "Spanish" },
                    { 3, "French" },
                    { 4, "German" },
                    { 5, "Chinese" },
                    { 6, "Japanese" },
                    { 7, "Arabic" },
                    { 8, "Russian" },
                    { 9, "Portuguese" },
                    { 10, "Hindi" },
                    { 11, "Bengali" },
                    { 12, "Urdu" },
                    { 13, "Italian" },
                    { 14, "Dutch" },
                    { 15, "Greek" },
                    { 16, "Turkish" },
                    { 17, "Korean" },
                    { 18, "Vietnamese" },
                    { 19, "Swedish" },
                    { 20, "Polish" },
                    { 21, "Finnish" },
                    { 22, "Hebrew" },
                    { 23, "Malay" },
                    { 24, "Indonesian" },
                    { 25, "Thai" },
                    { 26, "Hungarian" },
                    { 27, "Czech" },
                    { 28, "Romanian" },
                    { 29, "Bulgarian" },
                    { 30, "Persian" },
                    { 31, "Swahili" },
                    { 32, "Filipino" },
                    { 33, "Tamil" },
                    { 34, "Telugu" },
                    { 35, "Marathi" },
                    { 36, "Serbian" },
                    { 37, "Croatian" },
                    { 38, "Slovak" },
                    { 39, "Danish" },
                    { 40, "Norwegian" },
                    { 41, "Ukrainian" },
                    { 42, "Lithuanian" },
                    { 43, "Latvian" },
                    { 44, "Estonian" },
                    { 45, "Macedonian" },
                    { 46, "Armenian" },
                    { 47, "Georgian" },
                    { 48, "Pashto" },
                    { 49, "Sinhala" },
                    { 50, "Mongolian" },
                    { 51, "Basque" },
                    { 52, "Catalan" },
                    { 53, "Malagasy" },
                    { 54, "Azerbaijani" },
                    { 55, "Kurdish" },
                    { 56, "Tatar" },
                    { 57, "Belarusian" },
                    { 58, "Welsh" },
                    { 59, "Irish" },
                    { 60, "Yiddish" },
                    { 61, "Nepali" },
                    { 62, "Javanese" },
                    { 63, "Sundanese" },
                    { 64, "Gujarati" },
                    { 65, "Haitian Creole" },
                    { 66, "Zulu" },
                    { 67, "Xhosa" },
                    { 68, "Hausa" },
                    { 69, "Igbo" },
                    { 70, "Samoan" },
                    { 71, "Māori" },
                    { 72, "Tibetan" },
                    { 73, "Lao" },
                    { 74, "Burmese" },
                    { 75, "Khmer" },
                    { 76, "Twi" },
                    { 77, "Amharic" },
                    { 78, "Tigrinya" },
                    { 79, "Maldivian" },
                    { 80, "Oromo" },
                    { 81, "Fula" },
                    { 82, "Chichewa" },
                    { 83, "Bambara" },
                    { 84, "Tswana" },
                    { 85, "Shona" },
                    { 86, "Sesotho" },
                    { 87, "Wolof" },
                    { 88, "Dzongkha" },
                    { 89, "Kanuri" },
                    { 90, "Ga" },
                    { 91, "Acholi" },
                    { 92, "Ewe" },
                    { 93, "Bislama" },
                    { 94, "Tok Pisin" },
                    { 95, "Nauruan" },
                    { 96, "Chamorro" },
                    { 97, "Palauan" },
                    { 98, "Tuvaluan" },
                    { 99, "Marshallese" },
                    { 100, "Tetum" }
                });

            migrationBuilder.InsertData(
                schema: "Vehicles",
                table: "Cars",
                columns: new[] { "Id", "BodyTypeId", "BrandId", "ColorId", "FuelTypeId", "HasAirCondiations", "HasWiFi", "Model", "NumberOfSeats", "Year" },
                values: new object[,]
                {
                    { 1, 1, 1, 1, 1, false, false, "DTG", (byte)5, 2022 },
                    { 2, 2, 2, 2, 2, false, false, "DTG", (byte)7, 2021 },
                    { 3, 1, 1, 1, 1, false, false, "DTG", (byte)5, 2022 },
                    { 4, 2, 2, 2, 2, false, false, "DTG", (byte)7, 2021 },
                    { 5, 3, 3, 3, 1, false, false, "DTG", (byte)4, 2023 }
                });

            migrationBuilder.InsertData(
                schema: "Geography",
                table: "Cities",
                columns: new[] { "Id", "CountryId", "Name" },
                values: new object[,]
                {
                    { 1, 1, "New York" },
                    { 2, 1, "Los Angeles" },
                    { 3, 1, "Chicago" },
                    { 4, 1, "Houston" },
                    { 5, 1, "Phoenix" },
                    { 6, 1, "Philadelphia" },
                    { 7, 1, "San Antonio" },
                    { 8, 1, "San Diego" },
                    { 9, 1, "Dallas" },
                    { 10, 1, "San Jose" },
                    { 11, 2, "Toronto" },
                    { 12, 2, "Vancouver" },
                    { 13, 2, "Montreal" },
                    { 14, 2, "Calgary" },
                    { 15, 2, "Edmonton" },
                    { 16, 2, "Ottawa" },
                    { 17, 2, "Winnipeg" },
                    { 18, 2, "Quebec City" },
                    { 19, 2, "Hamilton" },
                    { 20, 2, "Victoria" },
                    { 21, 3, "Mexico City" },
                    { 22, 3, "Guadalajara" },
                    { 23, 3, "Monterrey" },
                    { 24, 3, "Puebla" },
                    { 25, 3, "Tijuana" },
                    { 26, 3, "Leon" },
                    { 27, 3, "Juarez" },
                    { 28, 3, "Merida" },
                    { 29, 3, "Queretaro" },
                    { 30, 3, "Cancun" },
                    { 31, 4, "Sao Paulo" },
                    { 32, 4, "Rio de Janeiro" },
                    { 33, 4, "Brasilia" },
                    { 34, 4, "Salvador" },
                    { 35, 4, "Fortaleza" },
                    { 36, 4, "Belo Horizonte" },
                    { 37, 4, "Manaus" },
                    { 38, 4, "Curitiba" },
                    { 39, 4, "Recife" },
                    { 40, 4, "Porto Alegre" },
                    { 41, 5, "Buenos Aires" },
                    { 42, 5, "Cordoba" },
                    { 43, 5, "Rosario" },
                    { 44, 5, "Mendoza" },
                    { 45, 5, "La Plata" },
                    { 46, 5, "San Miguel de Tucuman" },
                    { 47, 5, "Mar del Plata" },
                    { 48, 5, "Salta" },
                    { 49, 5, "Santa Fe" },
                    { 50, 5, "Neuquen" },
                    { 51, 6, "London" },
                    { 52, 6, "Manchester" },
                    { 53, 6, "Birmingham" },
                    { 54, 6, "Liverpool" },
                    { 55, 6, "Glasgow" },
                    { 56, 6, "Edinburgh" },
                    { 57, 6, "Bristol" },
                    { 58, 6, "Leeds" },
                    { 59, 6, "Cardiff" },
                    { 60, 6, "Newcastle" },
                    { 61, 7, "Paris" },
                    { 62, 7, "Lyon" },
                    { 63, 7, "Marseille" },
                    { 64, 7, "Toulouse" },
                    { 65, 7, "Nice" },
                    { 66, 7, "Nantes" },
                    { 67, 7, "Strasbourg" },
                    { 68, 7, "Bordeaux" },
                    { 69, 7, "Lille" },
                    { 70, 7, "Rennes" },
                    { 71, 8, "Berlin" },
                    { 72, 8, "Hamburg" },
                    { 73, 8, "Mun him" },
                    { 74, 8, "Cologne" },
                    { 75, 8, "Frankfurt" },
                    { 76, 8, "Stuttgart" },
                    { 77, 8, "Dusseldorf" },
                    { 78, 8, "Dortmund" },
                    { 79, 8, "Leipzig" },
                    { 80, 8, "Bremen" },
                    { 81, 9, "Rome" },
                    { 82, 9, "Milan" },
                    { 83, 9, "Naples" },
                    { 84, 9, "Turin" },
                    { 85, 9, "Palermo" },
                    { 86, 9, "Genoa" },
                    { 87, 9, "Bologna" },
                    { 88, 9, "Florence" },
                    { 89, 9, "Bari" },
                    { 90, 9, "Venice" },
                    { 91, 10, "Madrid" },
                    { 92, 10, "Barcelona" },
                    { 93, 10, "Valencia" },
                    { 94, 10, "Seville" },
                    { 95, 10, "Zaragoza" },
                    { 96, 10, "Malaga" },
                    { 97, 10, "Bilbao" },
                    { 98, 10, "Alicante" },
                    { 99, 10, "Cordoba" },
                    { 100, 10, "Valladolid" },
                    { 101, 11, "Shanghai" },
                    { 102, 11, "Beijing" },
                    { 103, 11, "Guangzhou" },
                    { 104, 11, "Shenzhen" },
                    { 105, 11, "Chengdu" },
                    { 106, 11, "Chongqing" },
                    { 107, 11, "Tianjin" },
                    { 108, 11, "Wuhan" },
                    { 109, 11, "Xi'an" },
                    { 110, 11, "Hangzhou" },
                    { 111, 12, "Tokyo" },
                    { 112, 12, "Osaka" },
                    { 113, 12, "Nagoya" },
                    { 114, 12, "Sapporo" },
                    { 115, 12, "Fukuoka" },
                    { 116, 12, "Kyoto" },
                    { 117, 12, "Hiroshima" },
                    { 118, 12, "Sendai" },
                    { 119, 12, "Kobe" },
                    { 120, 12, "Yokohama" },
                    { 121, 13, "Mumbai" },
                    { 122, 13, "Delhi" },
                    { 123, 13, "Bangalore" },
                    { 124, 13, "Hyderabad" },
                    { 125, 13, "Ahmedabad" },
                    { 126, 13, "Chennai" },
                    { 127, 13, "Kolkata" },
                    { 128, 13, "Pune" },
                    { 129, 13, "Jaipur" },
                    { 130, 13, "Lucknow" },
                    { 131, 14, "Seoul" },
                    { 132, 14, "Busan" },
                    { 133, 14, "Incheon" },
                    { 134, 14, "Daegu" },
                    { 135, 14, "Daejeon" },
                    { 136, 14, "Gwangju" },
                    { 137, 14, "Suwon" },
                    { 138, 14, "Ulsan" },
                    { 139, 14, "Changwon" },
                    { 140, 14, "Jeonju" },
                    { 141, 15, "Jakarta" },
                    { 142, 15, "Surabaya" },
                    { 143, 15, "Bandung" },
                    { 144, 15, "Medan" },
                    { 145, 15, "Semarang" },
                    { 146, 15, "Makassar" },
                    { 147, 15, "Palembang" },
                    { 148, 15, "Yogyakarta" },
                    { 149, 15, "Denpasar" },
                    { 150, 15, "Balikpapan" },
                    { 151, 16, "Moscow" },
                    { 152, 16, "Saint Petersburg" },
                    { 153, 16, "Novosibirsk" },
                    { 154, 16, "Yekaterinburg" },
                    { 155, 16, "Kazan" },
                    { 156, 16, "Nizhny Novgorod" },
                    { 157, 16, "Chelyabinsk" },
                    { 158, 16, "Samara" },
                    { 159, 16, "Omsk" },
                    { 160, 16, "Rostov-on-Don" },
                    { 161, 17, "Johannesburg" },
                    { 162, 17, "Cape Town" },
                    { 163, 17, "Durban" },
                    { 164, 17, "Pretoria" },
                    { 165, 17, "Port Elizabeth" },
                    { 166, 17, "Bloemfontein" },
                    { 167, 17, "East London" },
                    { 168, 17, "Polokwane" },
                    { 169, 17, "Nelspruit" },
                    { 170, 17, "Rustenburg" },
                    { 171, 18, "Cairo" },
                    { 172, 18, "Alexandria" },
                    { 173, 18, "Giza" },
                    { 174, 18, "Luxor" },
                    { 175, 18, "Aswan" },
                    { 176, 18, "Sharm El Sheikh" },
                    { 177, 18, "Hurghada" },
                    { 178, 18, "Mansoura" },
                    { 179, 18, "Tanta" },
                    { 180, 18, "Suez" },
                    { 181, 19, "Lagos" },
                    { 182, 19, "Abuja" },
                    { 183, 19, "Kano" },
                    { 184, 19, "Ibadan" },
                    { 185, 19, "Kaduna" },
                    { 186, 19, "Port Harcourt" },
                    { 187, 19, "Benin City" },
                    { 188, 19, "Maiduguri" },
                    { 189, 19, "Zaria" },
                    { 190, 19, "Jos" },
                    { 191, 20, "Nairobi" },
                    { 192, 20, "Mombasa" },
                    { 193, 20, "Kisumu" },
                    { 194, 20, "Nakuru" },
                    { 195, 20, "Eldoret" },
                    { 196, 20, "Thika" },
                    { 197, 20, "Malindi" },
                    { 198, 20, "Kitale" },
                    { 199, 20, "Garissa" },
                    { 200, 20, "Kakamega" },
                    { 201, 21, "Sydney" },
                    { 202, 21, "Melbourne" },
                    { 203, 21, "Brisbane" },
                    { 204, 21, "Perth" },
                    { 205, 21, "Adelaide" },
                    { 206, 21, "Canberra" },
                    { 207, 21, "Hobart" },
                    { 208, 21, "Darwin" },
                    { 209, 21, "Gold Coast" },
                    { 210, 21, "Newcastle" },
                    { 211, 22, "Auckland" },
                    { 212, 22, "Wellington" },
                    { 213, 22, "Christchurch" },
                    { 214, 22, "Hamilton" },
                    { 215, 22, "Tauranga" },
                    { 216, 22, "Dunedin" },
                    { 217, 22, "Palmerston North" },
                    { 218, 22, "Napier" },
                    { 219, 22, "Nelson" },
                    { 220, 22, "Rotorua" },
                    { 221, 23, "Riyadh" },
                    { 222, 23, "Jeddah" },
                    { 223, 23, "Mecca" },
                    { 224, 23, "Medina" },
                    { 225, 23, "Dammam" },
                    { 226, 23, "Khobar" },
                    { 227, 23, "Taif" },
                    { 228, 23, "Abha" },
                    { 229, 23, "Tabuk" },
                    { 230, 23, "Hail" },
                    { 231, 24, "Istanbul" },
                    { 232, 24, "Ankara" },
                    { 233, 24, "Izmir" },
                    { 234, 24, "Bursa" },
                    { 235, 24, "Adana" },
                    { 236, 24, "Antalya" },
                    { 237, 24, "Konya" },
                    { 238, 24, "Gaziantep" },
                    { 239, 24, "Sanliurfa" },
                    { 240, 24, "Mersin" },
                    { 241, 25, "Karachi" },
                    { 242, 25, "Lahore" },
                    { 243, 25, "Faisalabad" },
                    { 244, 25, "Rawalpindi" },
                    { 245, 25, "Multan" },
                    { 246, 25, "Hyderabad" },
                    { 247, 25, "Gujranwala" },
                    { 248, 25, "Peshawar" },
                    { 249, 25, "Quetta" },
                    { 250, 25, "Islamabad" },
                    { 251, 26, "Dhaka" },
                    { 252, 26, "Chittagong" },
                    { 253, 26, "Khulna" },
                    { 254, 26, "Rajshahi" },
                    { 255, 26, "Sylhet" },
                    { 256, 26, "Barisal" },
                    { 257, 26, "Rangpur" },
                    { 258, 26, "Comilla  Narayanganj" },
                    { 259, 26, "Mymensingh" },
                    { 260, 26, "Bogra" },
                    { 261, 27, "Ho Chi Minh City" },
                    { 262, 27, "Hanoi" },
                    { 263, 27, "Da Nang" },
                    { 264, 27, "Hai Phong" },
                    { 265, 27, "Can Tho" },
                    { 266, 27, "Hue" },
                    { 267, 27, "Nha Trang" },
                    { 268, 27, "Vung Tau" },
                    { 269, 27, "Bien Hoa" },
                    { 270, 27, "Thai Nguyen" },
                    { 271, 28, "Bangkok" },
                    { 272, 28, "Chiang Mai" },
                    { 273, 28, "Pattaya" },
                    { 274, 28, "Phuket" },
                    { 275, 28, "Hat Yai" },
                    { 276, 28, "Nakhon Ratchasima" },
                    { 277, 28, "Udon Thani" },
                    { 278, 28, "Surat Thani" },
                    { 279, 28, "Khon Kaen" },
                    { 280, 28, "Chiang Rai" },
                    { 281, 29, "Tehran" },
                    { 282, 29, "Mashhad" },
                    { 283, 29, "Isfahan" },
                    { 284, 29, "Shiraz" },
                    { 285, 29, "Tabriz" },
                    { 286, 29, "Karaj" },
                    { 287, 29, "Ahvaz" },
                    { 288, 29, "Qom" },
                    { 289, 29, "Kermanshah" },
                    { 290, 29, "Urmia" },
                    { 291, 30, "Tel Aviv" },
                    { 292, 30, "Jerusalem" },
                    { 293, 30, "Haifa" },
                    { 294, 30, "Rishon LeZion" },
                    { 295, 30, "Petah Tikva" },
                    { 296, 30, "Ashdod" },
                    { 297, 30, "Netanya" },
                    { 298, 30, "Beer Sheva" },
                    { 299, 30, "Holon" },
                    { 300, 30, "Bnei Brak" },
                    { 301, 31, "Kuala Lumpur" },
                    { 302, 31, "George Town" },
                    { 303, 31, "Johor Bahru" },
                    { 304, 31, "Ipoh" },
                    { 305, 31, "Shah Alam" },
                    { 306, 31, "Petaling Jaya" },
                    { 307, 31, "Kota Kinabalu" },
                    { 308, 31, "Malacca City" },
                    { 309, 31, "Alor Setar" },
                    { 310, 31, "Kuching" },
                    { 311, 32, "Quezon City" },
                    { 312, 32, "Manila" },
                    { 313, 32, "Davao City" },
                    { 314, 32, "Cebu City" },
                    { 315, 32, "Zamboanga City" },
                    { 316, 32, "Taguig" },
                    { 317, 32, "Pasig" },
                    { 318, 32, "Cagayan de Oro" },
                    { 319, 32, "Paranaque" },
                    { 320, 32, "Las Pinas" },
                    { 321, 33, "Lisbon" },
                    { 322, 33, "Porto" },
                    { 323, 33, "Amadora" },
                    { 324, 33, "Braga" },
                    { 325, 33, "Setubal" },
                    { 326, 33, "Coimbra" },
                    { 327, 33, "Queluz" },
                    { 328, 33, "Funchal" },
                    { 329, 33, "Vila Nova de Gaia" },
                    { 330, 33, "Almada" },
                    { 331, 34, "Athens" },
                    { 332, 34, "Thessaloniki" },
                    { 333, 34, "Patras" },
                    { 334, 34, "Heraklion" },
                    { 335, 34, "Larissa" },
                    { 336, 34, "Volos" },
                    { 337, 34, "Ioannina" },
                    { 338, 34, "Chania" },
                    { 339, 34, "Kavala" },
                    { 340, 34, "Kalamata" },
                    { 341, 35, "Amsterdam" },
                    { 342, 35, "Rotterdam" },
                    { 343, 35, "The Hague" },
                    { 344, 35, "Utrecht" },
                    { 345, 35, "Eindhoven" },
                    { 346, 35, "Tilburg" },
                    { 347, 35, "Groningen" },
                    { 348, 35, "Almere" },
                    { 349, 35, "Breda" },
                    { 350, 35, "Nijmegen" },
                    { 351, 36, "Stockholm" },
                    { 352, 36, "Gothenburg" },
                    { 353, 36, "Malmo" },
                    { 354, 36, "Uppsala" },
                    { 355, 36, "Vasteras" },
                    { 356, 36, "Orebro" },
                    { 357, 36, "Linkoping" },
                    { 358, 36, "Helsingborg" },
                    { 359, 36, "Jonkoping" },
                    { 360, 36, "Norrkoping" },
                    { 361, 37, "Oslo" },
                    { 362, 37, "Bergen" },
                    { 363, 37, "Trondheim" },
                    { 364, 37, "Stavanger" },
                    { 365, 37, "Drammen" },
                    { 366, 37, "Fredrikstad" },
                    { 367, 37, "Kristiansand" },
                    { 368, 37, "Sandnes" },
                    { 369, 37, "Tromsø" },
                    { 370, 37, "Ålesund" },
                    { 371, 38, "Copenhagen" },
                    { 372, 38, "Aarhus" },
                    { 373, 38, "Odense" },
                    { 374, 38, "Aalborg" },
                    { 375, 38, "Esbjerg" },
                    { 376, 38, "Randers" },
                    { 377, 38, "Kolding" },
                    { 378, 38, "Horsens" },
                    { 379, 38, "Vejle" },
                    { 380, 38, "Roskilde" },
                    { 381, 39, "Zurich" },
                    { 382, 39, "Geneva" },
                    { 383, 39, "Basel" },
                    { 384, 39, "Lausanne" },
                    { 385, 39, "Bern" },
                    { 386, 39, "Lucerne" },
                    { 387, 39, "St. Gallen" },
                    { 388, 39, "Lugano" },
                    { 389, 39, "Biel/Bienne" },
                    { 390, 39, "Thun" },
                    { 391, 40, "Warsaw" },
                    { 392, 40, "Krakow" },
                    { 393, 40, "Lodz" },
                    { 394, 40, "Wroclaw" },
                    { 395, 40, "Poznan" },
                    { 396, 40, "Gdansk" },
                    { 397, 40, "Szczecin" },
                    { 398, 40, "Bydgoszcz" },
                    { 399, 40, "Lublin" },
                    { 400, 40, "Katowice" },
                    { 401, 41, "Brussels" },
                    { 402, 41, "Antwerp" },
                    { 403, 41, "Ghent" },
                    { 404, 41, "Charleroi" },
                    { 405, 41, "Liege" },
                    { 406, 41, "Bruges" },
                    { 407, 41, "Namur" },
                    { 408, 41, "Leuven" },
                    { 409, 41, "Mons" },
                    { 410, 41, "Aalst" },
                    { 411, 42, "Bucharest" },
                    { 412, 42, "Cluj-Napoca" },
                    { 413, 42, "Timisoara" },
                    { 414, 42, "Iasi" },
                    { 415, 42, "Constanta" },
                    { 416, 42, "Craiova" },
                    { 417, 42, "Brasov" },
                    { 418, 42, "Galati" },
                    { 419, 42, "Ploiesti" },
                    { 420, 42, "Oradea" },
                    { 421, 43, "Prague" },
                    { 422, 43, "Brno" },
                    { 423, 43, "Ostrava" },
                    { 424, 43, "Plzen" },
                    { 425, 43, "Liberec" },
                    { 426, 43, "Olomouc" },
                    { 427, 43, "Ceske Budejovice" },
                    { 428, 43, "Hradec Kralove" },
                    { 429, 43, "Usti nad Labem" },
                    { 430, 43, "Pardubice" },
                    { 431, 44, "Budapest" },
                    { 432, 44, "Debrecen" },
                    { 433, 44, "Szeged" },
                    { 434, 44, "Miskolc" },
                    { 435, 44, "Pecs" },
                    { 436, 44, "Gyor" },
                    { 437, 44, "Nyiregyhaza" },
                    { 438, 44, "Kecskemet" },
                    { 439, 44, "Szekesfehervar" },
                    { 440, 44, "Szombathely" },
                    { 441, 45, "Kyiv" },
                    { 442, 45, "Kharkiv" },
                    { 443, 45, "Odesa" },
                    { 444, 45, "Dnipro" },
                    { 445, 45, "Donetsk" },
                    { 446, 45, "Zaporizhzhia" },
                    { 447, 45, "Lviv" },
                    { 448, 45, "Kryvyi Rih" },
                    { 449, 45, "Mykolaiv" },
                    { 450, 45, "Mariupol" },
                    { 451, 46, "Bogota" },
                    { 452, 46, "Medellin" },
                    { 453, 46, "Cali" },
                    { 454, 46, "Barranquilla" },
                    { 455, 46, "Cartagena" },
                    { 456, 46, "Bucaramanga" },
                    { 457, 46, "Cucuta" },
                    { 458, 46, "Pereira" },
                    { 459, 46, "Manizales" },
                    { 460, 46, "Ibague" },
                    { 461, 47, "Santiago" },
                    { 462, 47, "Valparaiso" },
                    { 463, 47, "Concepcion" },
                    { 464, 47, "Antofagasta" },
                    { 465, 47, "Vina del Mar" },
                    { 466, 47, "Temuco" },
                    { 467, 47, "Rancagua" },
                    { 468, 47, "Talca" },
                    { 469, 47, "Arica" },
                    { 470, 47, "Puerto Montt" },
                    { 471, 48, "Lima" },
                    { 472, 48, "Arequipa" },
                    { 473, 48, "Trujillo" },
                    { 474, 48, "Chiclayo" },
                    { 475, 48, "Piura" },
                    { 476, 48, "Cusco" },
                    { 477, 48, "Iquitos" },
                    { 478, 48, "Huancayo" },
                    { 479, 48, "Chimbote" },
                    { 480, 48, "Pucallpa" },
                    { 481, 49, "Caracas" },
                    { 482, 49, "Maracaibo" },
                    { 483, 49, "Valencia" },
                    { 484, 49, "Barquisimeto" },
                    { 485, 49, "Maracay" },
                    { 486, 49, "Ciudad Guayana" },
                    { 487, 49, "Barcelona" },
                    { 488, 49, "Maturin" },
                    { 489, 49, "Cumana" },
                    { 490, 49, "Puerto La Cruz" },
                    { 491, 50, "Quito" },
                    { 492, 50, "Guayaquil" },
                    { 493, 50, "Cuenca" },
                    { 494, 50, "Santo Domingo" },
                    { 495, 50, "Machala" },
                    { 496, 50, "Ambato" },
                    { 497, 50, "Portoviejo" },
                    { 498, 50, "Loja" },
                    { 499, 50, "Esmeraldas" },
                    { 500, 50, "Ibarra" },
                    { 501, 51, "Dubai" },
                    { 502, 51, "Abu Dhabi" },
                    { 503, 51, "Sharjah" },
                    { 504, 51, "Al Ain" },
                    { 505, 51, "Ajman" },
                    { 506, 51, "Ras Al Khaimah" },
                    { 507, 51, "Fujairah" },
                    { 508, 51, "Umm Al Quwain" },
                    { 509, 51, "Khor Fakkan" },
                    { 510, 51, "Dibba Al-Fujairah" },
                    { 511, 52, "Singapore" },
                    { 512, 52, "Woodlands" },
                    { 513, 52, "Jurong West" },
                    { 514, 52, "Tampines" },
                    { 515, 52, "Sengkang" },
                    { 516, 52, "Bedok" },
                    { 517, 52, "Yishun" },
                    { 518, 52, "Hougang" },
                    { 519, 52, "Ang Mo Kio" },
                    { 520, 52, "Punggol" },
                    { 521, 53, "Doha" },
                    { 522, 53, "Al Rayyan" },
                    { 523, 53, "Al Wakrah" },
                    { 524, 53, "Al Khor" },
                    { 525, 53, "Umm Salal" },
                    { 526, 53, "Dukhan" },
                    { 527, 53, "Mesaieed" },
                    { 528, 53, "Madinat ash Shamal" },
                    { 529, 53, "Al Shamal" },
                    { 530, 53, "Al Ghuwariyah" },
                    { 531, 54, "Juba" },
                    { 532, 54, "Wau" },
                    { 533, 54, "Malakal" },
                    { 534, 54, "Yei" },
                    { 535, 54, "Bor" },
                    { 536, 54, "Rumbek" },
                    { 537, 54, "Torit" },
                    { 538, 54, "Yambio" },
                    { 539, 54, "Aweil" },
                    { 540, 54, "Nimule" },
                    { 541, 55, "Yangon" },
                    { 542, 55, "Mandalay" },
                    { 543, 55, "Naypyidaw" },
                    { 544, 55, "Mawlamyine" },
                    { 545, 55, "Bago" },
                    { 546, 55, "Pathein" },
                    { 547, 55, "Monywa" },
                    { 548, 55, "Sittwe" },
                    { 549, 55, "Myitkyina" },
                    { 550, 55, "Taunggyi" },
                    { 551, 56, "Astana" },
                    { 552, 56, "Almaty" },
                    { 553, 56, "Shymkent" },
                    { 554, 56, "Karaganda" },
                    { 555, 56, "Aktobe" },
                    { 556, 56, "Taraz" },
                    { 557, 56, "Pavlodar" },
                    { 558, 56, "Ust-Kamenogorsk" },
                    { 559, 56, "Semey" },
                    { 560, 56, "Kostanay" },
                    { 561, 57, "Algiers" },
                    { 562, 57, "Oran" },
                    { 563, 57, "Constantine" },
                    { 564, 57, "Annaba" },
                    { 565, 57, "Blida" },
                    { 566, 57, "Batna" },
                    { 567, 57, "Djelfa" },
                    { 568, 57, "Sétif" },
                    { 569, 57, "Sidi Bel Abbes" },
                    { 570, 57, "Biskra" },
                    { 571, 58, "Casablanca" },
                    { 572, 58, "Rabat" },
                    { 573, 58, "Fes" },
                    { 574, 58, "Marrakesh" },
                    { 575, 58, "Tangier" },
                    { 576, 58, "Agadir" },
                    { 577, 58, "Meknes" },
                    { 578, 58, "Oujda" },
                    { 579, 58, "Kenitra" },
                    { 580, 58, "Tetouan" },
                    { 581, 59, "Tunis" },
                    { 582, 59, "Sfax" },
                    { 583, 59, "Sousse" },
                    { 584, 59, "Kairouan" },
                    { 585, 59, "Bizerte" },
                    { 586, 59, "Gabes" },
                    { 587, 59, "Ariana" },
                    { 588, 59, "Gafsa" },
                    { 589, 59, "Monastir" },
                    { 590, 59, "Ben Arous" },
                    { 591, 60, "Beirut" },
                    { 592, 60, "Tripoli" },
                    { 593, 60, "Sidon" },
                    { 594, 60, "Tyre" },
                    { 595, 60, "Jounieh" },
                    { 596, 60, "Zahle" },
                    { 597, 60, "Baalbek" },
                    { 598, 60, "Byblos" },
                    { 599, 60, "Nabatieh" },
                    { 600, 60, "Batroun" },
                    { 601, 61, "Amman" },
                    { 602, 61, "Zarqa" },
                    { 603, 61, "Irbid" },
                    { 604, 61, "Aqaba" },
                    { 605, 61, "Madaba" },
                    { 606, 61, "Salt" },
                    { 607, 61, "Jerash" },
                    { 608, 61, "Karak" },
                    { 609, 61, "Mafraq" },
                    { 610, 61, "Tafilah" },
                    { 611, 62, "Colombo" },
                    { 612, 62, "Kandy" },
                    { 613, 62, "Galle" },
                    { 614, 62, "Jaffna" },
                    { 615, 62, "Negombo" },
                    { 616, 62, "Ratnapura" },
                    { 617, 62, "Batticaloa" },
                    { 618, 62, "Trincomalee" },
                    { 619, 62, "Anuradhapura" },
                    { 620, 62, "Matara" },
                    { 621, 63, "Kathmandu" },
                    { 622, 63, "Pokhara" },
                    { 623, 63, "Lalitpur" },
                    { 624, 63, "Biratnagar" },
                    { 625, 63, "Bharatpur" },
                    { 626, 63, "Birgunj" },
                    { 627, 63, "Hetauda" },
                    { 628, 63, "Nepalgunj" },
                    { 629, 63, "Dhangadhi" },
                    { 630, 63, "Janakpur" },
                    { 631, 64, "Ulaanbaatar" },
                    { 632, 64, "Erdenet" },
                    { 633, 64, "Darkhan" },
                    { 634, 64, "Choibalsan" },
                    { 635, 64, "Mörön" },
                    { 636, 64, "Khovd" },
                    { 637, 64, "Ölgii" },
                    { 638, 64, "Ulaangom" },
                    { 639, 64, "Sainshand" },
                    { 640, 64, "Tsetserleg" },
                    { 641, 65, "Tashkent" },
                    { 642, 65, "Samarkand" },
                    { 643, 65, "Namangan" },
                    { 644, 65, "Andijan" },
                    { 645, 65, "Bukhara" },
                    { 646, 65, "Fergana" },
                    { 647, 65, "Jizzakh" },
                    { 648, 65, "Urgench" },
                    { 649, 65, "Nukus" },
                    { 650, 65, "Qarshi" },
                    { 651, 66, "Ashgabat" },
                    { 652, 66, "Türkmenabat" },
                    { 653, 66, "Daşoguz" },
                    { 654, 66, "Mary" },
                    { 655, 66, "Balkanabat" },
                    { 656, 66, "Bayramaly" },
                    { 657, 66, "Türkmenbaşy" },
                    { 658, 66, "Tejen" },
                    { 659, 66, "Kerki" },
                    { 660, 66, "Seydi" },
                    { 661, 67, "La Paz" },
                    { 662, 67, "Santa Cruz de la Sierra" },
                    { 663, 67, "Cochabamba" },
                    { 664, 67, "Sucre" },
                    { 665, 67, "Oruro" },
                    { 666, 67, "Potosí" },
                    { 667, 67, "Tarija" },
                    { 668, 67, "Trinidad" },
                    { 669, 67, "Cobija" },
                    { 670, 67, "Riberalta" },
                    { 671, 68, "Asunción" },
                    { 672, 68, "Ciudad del Este" },
                    { 673, 68, "Encarnación" },
                    { 674, 68, "Luque" },
                    { 675, 68, "San Lorenzo" },
                    { 676, 68, "Capiatá" },
                    { 677, 68, "Lambaré" },
                    { 678, 68, "Fernando de la Mora" },
                    { 679, 68, "Pedro Juan Caballero" },
                    { 680, 68, "Coronel Oviedo" },
                    { 681, 69, "Montevideo" },
                    { 682, 69, "Salto" },
                    { 683, 69, "Paysandú" },
                    { 684, 69, "Maldonado" },
                    { 685, 69, "Rivera" },
                    { 686, 69, "Las Piedras" },
                    { 687, 69, "Tacuarembó" },
                    { 688, 69, "Mercedes" },
                    { 689, 69, "Artigas" },
                    { 690, 69, "Minas" },
                    { 691, 70, "San José" },
                    { 692, 70, "Alajuela" },
                    { 693, 70, "Cartago" },
                    { 694, 70, "Heredia" },
                    { 695, 70, "Puntarenas" },
                    { 696, 70, "Limón" },
                    { 697, 70, "Liberia" },
                    { 698, 70, "San Isidro de El General" },
                    { 699, 70, "Quesada" },
                    { 700, 70, "Desamparados" },
                    { 701, 71, "Panama City" },
                    { 702, 71, "Colón" },
                    { 703, 71, "David" },
                    { 704, 71, "La Chorrera" },
                    { 705, 71, "Santiago" },
                    { 706, 71, "Chitré" },
                    { 707, 71, "Penonomé" },
                    { 708, 71, "Las Tablas" },
                    { 709, 71, "Bocas del Toro" },
                    { 710, 71, "Aguadulce" },
                    { 711, 72, "Tegucigalpa" },
                    { 712, 72, "San Pedro Sula" },
                    { 713, 72, "Choloma" },
                    { 714, 72, "La Ceiba" },
                    { 715, 72, "El Progreso" },
                    { 716, 72, "Comayagua" },
                    { 717, 72, "Puerto Cortés" },
                    { 718, 72, "Juticalpa" },
                    { 719, 72, "Siguatepeque" },
                    { 720, 72, "Santa Rosa de Copán" },
                    { 721, 73, "San Salvador" },
                    { 722, 73, "Santa Ana" },
                    { 723, 73, "San Miguel" },
                    { 724, 73, "Soyapango" },
                    { 725, 73, "Mejicanos" },
                    { 726, 73, "Apopa" },
                    { 727, 73, "Santa Tecla" },
                    { 728, 73, "Delgado" },
                    { 729, 73, "Sonsonate" },
                    { 730, 73, "Usulután" },
                    { 731, 74, "Guatemala City" },
                    { 732, 74, "Quetzaltenango" },
                    { 733, 74, "Mixco" },
                    { 734, 74, "Villa Nueva" },
                    { 735, 74, "Escuintla" },
                    { 736, 74, "San Juan Sacatepéquez" },
                    { 737, 74, "Chimaltenango" },
                    { 738, 74, "Huehuetenango" },
                    { 739, 74, "Coban" },
                    { 740, 74, "Chichicastenango" },
                    { 741, 75, "Santo Domingo" },
                    { 742, 75, "Santiago de los Caballeros" },
                    { 743, 75, "La Romana" },
                    { 744, 75, "San Pedro de Macorís" },
                    { 745, 75, "San Francisco de Macorís" },
                    { 746, 75, "Puerto Plata" },
                    { 747, 75, "La Vega" },
                    { 748, 75, "Baní" },
                    { 749, 75, "San Cristóbal" },
                    { 750, 75, "Barahona" },
                    { 751, 76, "Kuwait City" },
                    { 752, 76, "Hawalli" },
                    { 753, 76, "Al Farwaniyah" },
                    { 754, 76, "Mubarak Al-Kabeer" },
                    { 755, 76, "Al Ahmadi" },
                    { 756, 76, "Jahra" },
                    { 757, 76, "Fintas" },
                    { 758, 76, "Salmiya" },
                    { 759, 76, "Sabah Al-Salem" },
                    { 760, 76, "Mangaf" },
                    { 761, 77, "Manama" },
                    { 762, 77, "Riffa" },
                    { 763, 77, "Muharraq" },
                    { 764, 77, "Hamad Town" },
                    { 765, 77, "A'ali" },
                    { 766, 77, "Isa Town" },
                    { 767, 77, "Sitra" },
                    { 768, 77, "Budaiya" },
                    { 769, 77, "Jidhafs" },
                    { 770, 77, "Seef" },
                    { 771, 78, "Muscat" },
                    { 772, 78, "Salalah" },
                    { 773, 78, "Sohar" },
                    { 774, 78, "Nizwa" },
                    { 775, 78, "Sur" },
                    { 776, 78, "Ibri" },
                    { 777, 78, "Rustaq" },
                    { 778, 78, "Barka" },
                    { 779, 78, "Khasab" },
                    { 780, 78, "Al Buraimi" },
                    { 781, 79, "Baghdad" },
                    { 782, 79, "Basra" },
                    { 783, 79, "Mosul" },
                    { 784, 79, "Erbil" },
                    { 785, 79, "Najaf" },
                    { 786, 79, "Karbala" },
                    { 787, 79, "Sulaymaniyah" },
                    { 788, 79, "Kirkuk" },
                    { 789, 79, "Hilla" },
                    { 790, 79, "Diwaniyah" },
                    { 791, 80, "Damascus" },
                    { 792, 80, "Aleppo" },
                    { 793, 80, "Homs" },
                    { 794, 80, "Latakia" },
                    { 795, 80, "Hama" },
                    { 796, 80, "Deir ez-Zor" },
                    { 797, 80, "Raqqa" },
                    { 798, 80, "Tartus" },
                    { 799, 80, "Daraa" },
                    { 800, 80, "Idlib" },
                    { 801, 81, "Sana'a" },
                    { 802, 81, "Aden" },
                    { 803, 81, "Taiz" },
                    { 804, 81, "Hodeidah" },
                    { 805, 81, "Ibb" },
                    { 806, 81, "Dhamar" },
                    { 807, 81, "Mukalla" },
                    { 808, 81, "Zabid" },
                    { 809, 81, "Sa'dah" },
                    { 810, 81, "Al Bayda" },
                    { 811, 82, "Khartoum" },
                    { 812, 82, "Omdurman" },
                    { 813, 82, "Port Sudan" },
                    { 814, 82, "Kassala" },
                    { 815, 82, "El Obeid" },
                    { 816, 82, "Nyala" },
                    { 817, 82, "Wad Medani" },
                    { 818, 82, "El Fasher" },
                    { 819, 82, "Atbara" },
                    { 820, 82, "Gedaref" },
                    { 821, 83, "Addis Ababa" },
                    { 822, 83, "Dire Dawa" },
                    { 823, 83, "Mekelle" },
                    { 824, 83, "Gondar" },
                    { 825, 83, "Adama" },
                    { 826, 83, "Hawassa" },
                    { 827, 83, "Bahir Dar" },
                    { 828, 83, "Jimma" },
                    { 829, 83, "Dessie" },
                    { 830, 83, "Jijiga" },
                    { 831, 84, "Dodoma" },
                    { 832, 84, "Dar es Salaam" },
                    { 833, 84, "Mwanza" },
                    { 834, 84, "Arusha" },
                    { 835, 84, "Mbeya" },
                    { 836, 84, "Zanzibar City" },
                    { 837, 84, "Tanga" },
                    { 838, 84, "Morogoro" },
                    { 839, 84, "Kigoma" },
                    { 840, 84, "Songea" },
                    { 841, 85, "Lusaka" },
                    { 842, 85, "Ndola" },
                    { 843, 85, "Kitwe" },
                    { 844, 85, "Kabwe" },
                    { 845, 85, "Chingola" },
                    { 846, 85, "Mufulira" },
                    { 847, 85, "Livingstone" },
                    { 848, 85, "Luanshya" },
                    { 849, 85, "Chipata" },
                    { 850, 85, "Kasama" },
                    { 851, 86, "Harare" },
                    { 852, 86, "Bulawayo" },
                    { 853, 86, "Chitungwiza" },
                    { 854, 86, "Mutare" },
                    { 855, 86, "Gweru" },
                    { 856, 86, "Kwekwe" },
                    { 857, 86, "Kadoma" },
                    { 858, 86, "Masvingo" },
                    { 859, 86, "Chinhoyi" },
                    { 860, 86, "Bindura" },
                    { 861, 87, "Gaborone" },
                    { 862, 87, "Francistown" },
                    { 863, 87, "Molepolole" },
                    { 864, 87, "Serowe" },
                    { 865, 87, "Selibe Phikwe" },
                    { 866, 87, "Maun" },
                    { 867, 87, "Kanye" },
                    { 868, 87, "Mochudi" },
                    { 869, 87, "Lobatse" },
                    { 870, 87, "Palapye" },
                    { 871, 88, "Windhoek" },
                    { 872, 88, "Walvis Bay" },
                    { 873, 88, "Swakopmund" },
                    { 874, 88, "Rundu" },
                    { 875, 88, "Oshakati" },
                    { 876, 88, "Katima Mulilo" },
                    { 877, 88, "Otjiwarongo" },
                    { 878, 88, "Keetmanshoop" },
                    { 879, 88, "Tsumeb" },
                    { 880, 88, "Gobabis" },
                    { 881, 89, "Antananarivo" },
                    { 882, 89, "Toamasina" },
                    { 883, 89, "Antsirabe" },
                    { 884, 89, "Fianarantsoa" },
                    { 885, 89, "Mahajanga" },
                    { 886, 89, "Toliara" },
                    { 887, 89, "Morondava" },
                    { 888, 89, "Ambatondrazaka" },
                    { 889, 89, "Manakara" },
                    { 890, 89, "Nosy Be" },
                    { 891, 90, "Port Moresby" },
                    { 892, 90, "Lae" },
                    { 893, 90, "Madang" },
                    { 894, 90, "Mount Hagen" },
                    { 895, 90, "Goroka" },
                    { 896, 90, "Rabaul" },
                    { 897, 90, "Kimbe" },
                    { 898, 90, "Wewak" },
                    { 899, 90, "Kavieng" },
                    { 900, 90, "Alotau" },
                    { 901, 91, "Suva" },
                    { 902, 91, "Nadi" },
                    { 903, 91, "Lautoka" },
                    { 904, 91, "Labasa" },
                    { 905, 91, "Ba" },
                    { 906, 91, "Levuka" },
                    { 907, 91, "Savusavu" },
                    { 908, 91, "Rakiraki" },
                    { 909, 91, "Tavua" },
                    { 910, 91, "Sigatoka" },
                    { 911, 92, "Honiara" },
                    { 912, 92, "Gizo" },
                    { 913, 92, "Auki" },
                    { 914, 92, "Tulagi" },
                    { 915, 92, "Kirakira" },
                    { 916, 92, "Lata" },
                    { 917, 92, "Munda" },
                    { 918, 92, "Taro" },
                    { 919, 92, "Buala" },
                    { 920, 92, "Noro" },
                    { 921, 93, "Bandar Seri Begawan" },
                    { 922, 93, "Kuala Belait" },
                    { 923, 93, "Seria" },
                    { 924, 93, "Tutong" },
                    { 925, 93, "Bangar" },
                    { 926, 93, "Muara" },
                    { 927, 93, "Temburong" },
                    { 928, 93, "Lumut" },
                    { 929, 93, "Jerudong" },
                    { 930, 93, "Lamunin" },
                    { 931, 94, "Lilongwe" },
                    { 932, 94, "Blantyre" },
                    { 933, 94, "Mzuzu" },
                    { 934, 94, "Zomba" },
                    { 935, 94, "Kasungu" },
                    { 936, 94, "Mangochi" },
                    { 937, 94, "Karonga" },
                    { 938, 94, "Salima" },
                    { 939, 94, "Nkhotakota" },
                    { 940, 94, "Mchinji" },
                    { 941, 95, "Gitega" },
                    { 942, 95, "Ngozi" },
                    { 943, 95, "Ruyigi" },
                    { 944, 95, "Kayanza" },
                    { 945, 95, "Muyinga" },
                    { 946, 95, "Makamba" },
                    { 947, 95, "Bururi" },
                    { 948, 95, "Cibitoke" },
                    { 949, 95, "Bubanza" },
                    { 950, 95, "Karuzi" },
                    { 951, 96, "Kigali" },
                    { 952, 96, "Gisenyi" },
                    { 953, 96, "Ruhengeri" },
                    { 954, 96, "Butare" },
                    { 955, 96, "Muhanga" },
                    { 956, 96, "Byumba" },
                    { 957, 96, "Cyangugu" },
                    { 958, 96, "Nyanza" },
                    { 959, 96, "Kibuye" },
                    { 960, 96, "Rwamagana" },
                    { 961, 97, "Abidjan" },
                    { 962, 97, "Yamoussoukro" },
                    { 963, 97, "Bouaké" },
                    { 964, 97, "Daloa" },
                    { 965, 97, "Korhogo" },
                    { 966, 97, "San-Pédro" },
                    { 967, 97, "Man" },
                    { 968, 97, "Gagnoa" },
                    { 969, 97, "Abengourou" },
                    { 970, 97, "Divo" },
                    { 971, 98, "Dakar" },
                    { 972, 98, "Thiès" },
                    { 973, 98, "Saint-Louis" },
                    { 974, 98, "Kaolack" },
                    { 975, 98, "Ziguinchor" },
                    { 976, 98, "Rufisque" },
                    { 977, 98, "Mbour" },
                    { 978, 98, "Diourbel" },
                    { 979, 98, "Louga" },
                    { 980, 98, "Tambacounda" },
                    { 981, 99, "Accra" },
                    { 982, 99, "Kumasi" },
                    { 983, 99, "Tamale" },
                    { 984, 99, "Sekondi-Takoradi" },
                    { 985, 99, "Tema" },
                    { 986, 99, "Cape Coast" },
                    { 987, 99, "Koforidua" },
                    { 988, 99, "Wa" },
                    { 989, 99, "Ho" },
                    { 990, 99, "Sunyani" },
                    { 991, 100, "Yaoundé" },
                    { 992, 100, "Douala" },
                    { 993, 100, "Bamenda" },
                    { 994, 100, "Garoua" },
                    { 995, 100, "Bafoussam" },
                    { 996, 100, "Maroua" },
                    { 997, 100, "Ngaoundéré" },
                    { 998, 100, "Kumba" },
                    { 999, 100, "Buea" },
                    { 1000, 100, "Limbe" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_CarImages_CarId",
                schema: "Vehicles",
                table: "CarImages",
                column: "CarId");

            migrationBuilder.CreateIndex(
                name: "IX_Cars_BodyTypeId",
                schema: "Vehicles",
                table: "Cars",
                column: "BodyTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Cars_BrandId",
                schema: "Vehicles",
                table: "Cars",
                column: "BrandId");

            migrationBuilder.CreateIndex(
                name: "IX_Cars_ColorId",
                schema: "Vehicles",
                table: "Cars",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_Cars_FuelTypeId",
                schema: "Vehicles",
                table: "Cars",
                column: "FuelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Cities_CountryId",
                schema: "Geography",
                table: "Cities",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Destinations_CityId",
                schema: "Geography",
                table: "Destinations",
                column: "CityId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverCities_CityId",
                schema: "Drivers",
                table: "DriverCities",
                column: "CityId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverCities_DriverId",
                schema: "Drivers",
                table: "DriverCities",
                column: "DriverId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverCountries_CountryId",
                schema: "Drivers",
                table: "DriverCountries",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverCountries_DriverId",
                schema: "Drivers",
                table: "DriverCountries",
                column: "DriverId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverInteractions_DriverId",
                schema: "Drivers",
                table: "DriverInteractions",
                column: "DriverId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverInteractions_UserId",
                schema: "Drivers",
                table: "DriverInteractions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverLanguages_DriverId",
                schema: "Localization",
                table: "DriverLanguages",
                column: "DriverId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverLanguages_LanguageId",
                schema: "Localization",
                table: "DriverLanguages",
                column: "LanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_Drivers_CarId",
                schema: "Drivers",
                table: "Drivers",
                column: "CarId",
                unique: true,
                filter: "[CarId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Drivers_NationalityId",
                schema: "Drivers",
                table: "Drivers",
                column: "NationalityId");

            migrationBuilder.CreateIndex(
                name: "IX_Drivers_UserId",
                schema: "Drivers",
                table: "Drivers",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_UserId",
                table: "Messages",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Travellers_CityId",
                schema: "Travellers",
                table: "Travellers",
                column: "CityId");

            migrationBuilder.CreateIndex(
                name: "IX_Travellers_NationalityId",
                schema: "Travellers",
                table: "Travellers",
                column: "NationalityId");

            migrationBuilder.CreateIndex(
                name: "IX_Travellers_PreferredLanguageId",
                schema: "Travellers",
                table: "Travellers",
                column: "PreferredLanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_Travellers_UserId",
                schema: "Travellers",
                table: "Travellers",
                column: "UserId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "CarImages",
                schema: "Vehicles");

            migrationBuilder.DropTable(
                name: "Destinations",
                schema: "Geography");

            migrationBuilder.DropTable(
                name: "DriverCities",
                schema: "Drivers");

            migrationBuilder.DropTable(
                name: "DriverCountries",
                schema: "Drivers");

            migrationBuilder.DropTable(
                name: "DriverInteractions",
                schema: "Drivers");

            migrationBuilder.DropTable(
                name: "DriverLanguages",
                schema: "Localization");

            migrationBuilder.DropTable(
                name: "Messages");

            migrationBuilder.DropTable(
                name: "Travellers",
                schema: "Travellers");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Drivers",
                schema: "Drivers");

            migrationBuilder.DropTable(
                name: "Cities",
                schema: "Geography");

            migrationBuilder.DropTable(
                name: "Languages",
                schema: "Localization");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Cars",
                schema: "Vehicles");

            migrationBuilder.DropTable(
                name: "Countries",
                schema: "Geography");

            migrationBuilder.DropTable(
                name: "BodyTypes",
                schema: "Vehicle");

            migrationBuilder.DropTable(
                name: "Brands",
                schema: "Vehicles");

            migrationBuilder.DropTable(
                name: "Colors",
                schema: "Vehicles");

            migrationBuilder.DropTable(
                name: "FuelTypes",
                schema: "Vehicles");
        }
    }
}
