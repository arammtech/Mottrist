// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mottrist.Repository.EntityFrameworkCore.Context;

#nullable disable

namespace Mottrist.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503161530_removeModelTable")]
    partial class removeModelTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AvailableTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailableAllTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LicenseImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("YearsOfExperience")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Drivers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyTypes", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Type = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Coupe"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Pickup"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Convertible"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Wagon"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Minivan"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Roadster"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Crossover"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Limousine"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Van"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Sports Car"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Luxury Sedan"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Coupe Convertible"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Station Wagon"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Supercar"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Hypercar"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Off-road"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Targa"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Subaru"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Lexus"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Jaguar"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Land Rover"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Lamborghini"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAirCondiations")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWiFi")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("NumberOfSeats")
                        .HasColumnType("tinyint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("Cars", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyTypeId = 1,
                            BrandId = 1,
                            ColorId = 1,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)5,
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            BodyTypeId = 2,
                            BrandId = 2,
                            ColorId = 2,
                            FuelTypeId = 2,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)7,
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            BodyTypeId = 1,
                            BrandId = 1,
                            ColorId = 1,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)5,
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            BodyTypeId = 2,
                            BrandId = 2,
                            ColorId = 2,
                            FuelTypeId = 2,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)7,
                            Year = 2021
                        },
                        new
                        {
                            Id = 5,
                            BodyTypeId = 3,
                            BrandId = 3,
                            ColorId = 3,
                            FuelTypeId = 1,
                            HasAirCondiations = false,
                            HasWiFi = false,
                            Model = "DTG",
                            NumberOfSeats = (byte)4,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages", "Vehicles");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 4,
                            Name = "White"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Beige"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Turquoise"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Teal"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Magenta"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Copper"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ivory"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Champagne"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes", "Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Petrol"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Hybrid"
                        },
                        new
                        {
                            Id = 5,
                            Type = "CNG"
                        },
                        new
                        {
                            Id = 6,
                            Type = "LPG"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Ethanol"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Biofuel"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Hydrogen"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Propane"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Methanol"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Butanol"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Natural Gas"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Biodiesel"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Alcohol"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Fischer-Tropsch"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Electric + Petrol"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Electric + Diesel"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Electric + Hydrogen"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Compressed Natural Gas (CNG)"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Destinations", "Geography");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.DriverInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("DriverInteractions", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Traveler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhatsAppNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PreferredLanguageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Travellers", "Travellers");
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Traveler",
                            NormalizedName = "TRAVELER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Geography");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Houston"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Phoenix"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Philadelphia"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "San Antonio"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "San Diego"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Dallas"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "San Jose"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 2,
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Name = "Montreal"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 2,
                            Name = "Vancouver"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 2,
                            Name = "Calgary"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 2,
                            Name = "Ottawa"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 2,
                            Name = "Edmonton"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Name = "Winnipeg"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 2,
                            Name = "Quebec City"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 2,
                            Name = "Hamilton"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 2,
                            Name = "Kitchener"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 3,
                            Name = "London"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 3,
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 3,
                            Name = "Birmingham"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 3,
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 3,
                            Name = "Leeds"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 3,
                            Name = "Sheffield"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 3,
                            Name = "Edinburgh"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 3,
                            Name = "Glasgow"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 3,
                            Name = "Bristol"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 3,
                            Name = "Nottingham"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 4,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 4,
                            Name = "Munich"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 4,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 4,
                            Name = "Hamburg"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 4,
                            Name = "Cologne"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 4,
                            Name = "Stuttgart"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 4,
                            Name = "Düsseldorf"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 4,
                            Name = "Dortmund"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 4,
                            Name = "Essen"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 4,
                            Name = "Bremen"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 5,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 5,
                            Name = "Marseille"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 5,
                            Name = "Lyon"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 5,
                            Name = "Toulouse"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 5,
                            Name = "Nice"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 5,
                            Name = "Nantes"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 5,
                            Name = "Strasbourg"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 5,
                            Name = "Montpellier"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 5,
                            Name = "Bordeaux"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 5,
                            Name = "Lille"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 6,
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 6,
                            Name = "Melbourne"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 6,
                            Name = "Brisbane"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 6,
                            Name = "Perth"
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 6,
                            Name = "Adelaide"
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 6,
                            Name = "Gold Coast"
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 6,
                            Name = "Hobart"
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 6,
                            Name = "Canberra"
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 6,
                            Name = "Newcastle"
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 6,
                            Name = "Wollongong"
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 7,
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 7,
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 7,
                            Name = "Brasília"
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 7,
                            Name = "Salvador"
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 7,
                            Name = "Fortaleza"
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 7,
                            Name = "Belo Horizonte"
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 7,
                            Name = "Manaus"
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 7,
                            Name = "Curitiba"
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 7,
                            Name = "Recife"
                        },
                        new
                        {
                            Id = 70,
                            CountryId = 7,
                            Name = "Porto Alegre"
                        },
                        new
                        {
                            Id = 71,
                            CountryId = 8,
                            Name = "Buenos Aires"
                        },
                        new
                        {
                            Id = 72,
                            CountryId = 8,
                            Name = "Córdoba"
                        },
                        new
                        {
                            Id = 73,
                            CountryId = 8,
                            Name = "Rosario"
                        },
                        new
                        {
                            Id = 74,
                            CountryId = 8,
                            Name = "Mendoza"
                        },
                        new
                        {
                            Id = 75,
                            CountryId = 8,
                            Name = "La Plata"
                        },
                        new
                        {
                            Id = 76,
                            CountryId = 8,
                            Name = "San Miguel de Tucumán"
                        },
                        new
                        {
                            Id = 77,
                            CountryId = 8,
                            Name = "Mar del Plata"
                        },
                        new
                        {
                            Id = 78,
                            CountryId = 8,
                            Name = "Salta"
                        },
                        new
                        {
                            Id = 79,
                            CountryId = 8,
                            Name = "Santa Fe"
                        },
                        new
                        {
                            Id = 80,
                            CountryId = 8,
                            Name = "Santiago del Estero"
                        },
                        new
                        {
                            Id = 81,
                            CountryId = 9,
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = 82,
                            CountryId = 9,
                            Name = "Shanghai"
                        },
                        new
                        {
                            Id = 83,
                            CountryId = 9,
                            Name = "Guangzhou"
                        },
                        new
                        {
                            Id = 84,
                            CountryId = 9,
                            Name = "Shenzhen"
                        },
                        new
                        {
                            Id = 85,
                            CountryId = 9,
                            Name = "Chengdu"
                        },
                        new
                        {
                            Id = 86,
                            CountryId = 9,
                            Name = "Hangzhou"
                        },
                        new
                        {
                            Id = 87,
                            CountryId = 9,
                            Name = "Xi'an"
                        },
                        new
                        {
                            Id = 88,
                            CountryId = 9,
                            Name = "Wuhan"
                        },
                        new
                        {
                            Id = 89,
                            CountryId = 9,
                            Name = "Chongqing"
                        },
                        new
                        {
                            Id = 90,
                            CountryId = 9,
                            Name = "Tianjin"
                        },
                        new
                        {
                            Id = 91,
                            CountryId = 10,
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 92,
                            CountryId = 10,
                            Name = "Osaka"
                        },
                        new
                        {
                            Id = 93,
                            CountryId = 10,
                            Name = "Kyoto"
                        },
                        new
                        {
                            Id = 94,
                            CountryId = 10,
                            Name = "Yokohama"
                        },
                        new
                        {
                            Id = 95,
                            CountryId = 10,
                            Name = "Fukuoka"
                        },
                        new
                        {
                            Id = 96,
                            CountryId = 10,
                            Name = "Sapporo"
                        },
                        new
                        {
                            Id = 97,
                            CountryId = 10,
                            Name = "Nagoya"
                        },
                        new
                        {
                            Id = 98,
                            CountryId = 10,
                            Name = "Kobe"
                        },
                        new
                        {
                            Id = 99,
                            CountryId = 10,
                            Name = "Hiroshima"
                        },
                        new
                        {
                            Id = 100,
                            CountryId = 10,
                            Name = "Sendai"
                        },
                        new
                        {
                            Id = 101,
                            CountryId = 11,
                            Name = "Mumbai"
                        },
                        new
                        {
                            Id = 102,
                            CountryId = 11,
                            Name = "Delhi"
                        },
                        new
                        {
                            Id = 103,
                            CountryId = 11,
                            Name = "Bangalore"
                        },
                        new
                        {
                            Id = 104,
                            CountryId = 11,
                            Name = "Hyderabad"
                        },
                        new
                        {
                            Id = 105,
                            CountryId = 11,
                            Name = "Chennai"
                        },
                        new
                        {
                            Id = 106,
                            CountryId = 11,
                            Name = "Kolkata"
                        },
                        new
                        {
                            Id = 107,
                            CountryId = 11,
                            Name = "Ahmedabad"
                        },
                        new
                        {
                            Id = 108,
                            CountryId = 11,
                            Name = "Pune"
                        },
                        new
                        {
                            Id = 109,
                            CountryId = 11,
                            Name = "Jaipur"
                        },
                        new
                        {
                            Id = 110,
                            CountryId = 11,
                            Name = "Lucknow"
                        },
                        new
                        {
                            Id = 111,
                            CountryId = 12,
                            Name = "Seoul"
                        },
                        new
                        {
                            Id = 112,
                            CountryId = 12,
                            Name = "Busan"
                        },
                        new
                        {
                            Id = 113,
                            CountryId = 12,
                            Name = "Incheon"
                        },
                        new
                        {
                            Id = 114,
                            CountryId = 12,
                            Name = "Daegu"
                        },
                        new
                        {
                            Id = 115,
                            CountryId = 12,
                            Name = "Daejeon"
                        },
                        new
                        {
                            Id = 116,
                            CountryId = 12,
                            Name = "Gwangju"
                        },
                        new
                        {
                            Id = 117,
                            CountryId = 12,
                            Name = "Suwon"
                        },
                        new
                        {
                            Id = 118,
                            CountryId = 12,
                            Name = "Ulsan"
                        },
                        new
                        {
                            Id = 119,
                            CountryId = 12,
                            Name = "Jeonju"
                        },
                        new
                        {
                            Id = 120,
                            CountryId = 12,
                            Name = "Goyang"
                        },
                        new
                        {
                            Id = 121,
                            CountryId = 13,
                            Name = "Johannesburg"
                        },
                        new
                        {
                            Id = 122,
                            CountryId = 13,
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = 123,
                            CountryId = 13,
                            Name = "Durban"
                        },
                        new
                        {
                            Id = 124,
                            CountryId = 13,
                            Name = "Pretoria"
                        },
                        new
                        {
                            Id = 125,
                            CountryId = 13,
                            Name = "Port Elizabeth"
                        },
                        new
                        {
                            Id = 126,
                            CountryId = 13,
                            Name = "Bloemfontein"
                        },
                        new
                        {
                            Id = 127,
                            CountryId = 13,
                            Name = "East London"
                        },
                        new
                        {
                            Id = 128,
                            CountryId = 13,
                            Name = "Polokwane"
                        },
                        new
                        {
                            Id = 129,
                            CountryId = 13,
                            Name = "Nelspruit"
                        },
                        new
                        {
                            Id = 130,
                            CountryId = 13,
                            Name = "Kimberley"
                        },
                        new
                        {
                            Id = 131,
                            CountryId = 14,
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = 132,
                            CountryId = 14,
                            Name = "Abuja"
                        },
                        new
                        {
                            Id = 133,
                            CountryId = 14,
                            Name = "Kano"
                        },
                        new
                        {
                            Id = 134,
                            CountryId = 14,
                            Name = "Ibadan"
                        },
                        new
                        {
                            Id = 135,
                            CountryId = 14,
                            Name = "Port Harcourt"
                        },
                        new
                        {
                            Id = 136,
                            CountryId = 14,
                            Name = "Benin City"
                        },
                        new
                        {
                            Id = 137,
                            CountryId = 14,
                            Name = "Kaduna"
                        },
                        new
                        {
                            Id = 138,
                            CountryId = 14,
                            Name = "Maiduguri"
                        },
                        new
                        {
                            Id = 139,
                            CountryId = 14,
                            Name = "Enugu"
                        },
                        new
                        {
                            Id = 140,
                            CountryId = 14,
                            Name = "Jos"
                        },
                        new
                        {
                            Id = 141,
                            CountryId = 15,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 142,
                            CountryId = 15,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 143,
                            CountryId = 15,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 144,
                            CountryId = 15,
                            Name = "Shubra El Kheima"
                        },
                        new
                        {
                            Id = 145,
                            CountryId = 15,
                            Name = "Port Said"
                        },
                        new
                        {
                            Id = 146,
                            CountryId = 15,
                            Name = "Suez"
                        },
                        new
                        {
                            Id = 147,
                            CountryId = 15,
                            Name = "Luxor"
                        },
                        new
                        {
                            Id = 148,
                            CountryId = 15,
                            Name = "Aswan"
                        },
                        new
                        {
                            Id = 149,
                            CountryId = 15,
                            Name = "Ismailia"
                        },
                        new
                        {
                            Id = 150,
                            CountryId = 15,
                            Name = "Mansoura"
                        },
                        new
                        {
                            Id = 151,
                            CountryId = 16,
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = 152,
                            CountryId = 16,
                            Name = "Guadalajara"
                        },
                        new
                        {
                            Id = 153,
                            CountryId = 16,
                            Name = "Monterrey"
                        },
                        new
                        {
                            Id = 154,
                            CountryId = 16,
                            Name = "Puebla"
                        },
                        new
                        {
                            Id = 155,
                            CountryId = 16,
                            Name = "Tijuana"
                        },
                        new
                        {
                            Id = 156,
                            CountryId = 16,
                            Name = "León"
                        },
                        new
                        {
                            Id = 157,
                            CountryId = 16,
                            Name = "Cancún"
                        },
                        new
                        {
                            Id = 158,
                            CountryId = 16,
                            Name = "Mérida"
                        },
                        new
                        {
                            Id = 159,
                            CountryId = 16,
                            Name = "Toluca"
                        },
                        new
                        {
                            Id = 160,
                            CountryId = 16,
                            Name = "Chihuahua"
                        },
                        new
                        {
                            Id = 161,
                            CountryId = 17,
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 162,
                            CountryId = 17,
                            Name = "Milan"
                        },
                        new
                        {
                            Id = 163,
                            CountryId = 17,
                            Name = "Naples"
                        },
                        new
                        {
                            Id = 164,
                            CountryId = 17,
                            Name = "Turin"
                        },
                        new
                        {
                            Id = 165,
                            CountryId = 17,
                            Name = "Palermo"
                        },
                        new
                        {
                            Id = 166,
                            CountryId = 17,
                            Name = "Genoa"
                        },
                        new
                        {
                            Id = 167,
                            CountryId = 17,
                            Name = "Bologna"
                        },
                        new
                        {
                            Id = 168,
                            CountryId = 17,
                            Name = "Florence"
                        },
                        new
                        {
                            Id = 169,
                            CountryId = 17,
                            Name = "Venice"
                        },
                        new
                        {
                            Id = 170,
                            CountryId = 17,
                            Name = "Verona"
                        },
                        new
                        {
                            Id = 171,
                            CountryId = 18,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 172,
                            CountryId = 18,
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 173,
                            CountryId = 18,
                            Name = "Valencia"
                        },
                        new
                        {
                            Id = 174,
                            CountryId = 18,
                            Name = "Seville"
                        },
                        new
                        {
                            Id = 175,
                            CountryId = 18,
                            Name = "Zaragoza"
                        },
                        new
                        {
                            Id = 176,
                            CountryId = 18,
                            Name = "Málaga"
                        },
                        new
                        {
                            Id = 177,
                            CountryId = 18,
                            Name = "Murcia"
                        },
                        new
                        {
                            Id = 178,
                            CountryId = 18,
                            Name = "Bilbao"
                        },
                        new
                        {
                            Id = 179,
                            CountryId = 18,
                            Name = "Alicante"
                        },
                        new
                        {
                            Id = 180,
                            CountryId = 18,
                            Name = "Granada"
                        },
                        new
                        {
                            Id = 181,
                            CountryId = 19,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 182,
                            CountryId = 19,
                            Name = "Saint Petersburg"
                        },
                        new
                        {
                            Id = 183,
                            CountryId = 19,
                            Name = "Novosibirsk"
                        },
                        new
                        {
                            Id = 184,
                            CountryId = 19,
                            Name = "Yekaterinburg"
                        },
                        new
                        {
                            Id = 185,
                            CountryId = 19,
                            Name = "Kazan"
                        },
                        new
                        {
                            Id = 186,
                            CountryId = 19,
                            Name = "Nizhny Novgorod"
                        },
                        new
                        {
                            Id = 187,
                            CountryId = 19,
                            Name = "Chelyabinsk"
                        },
                        new
                        {
                            Id = 188,
                            CountryId = 19,
                            Name = "Samara"
                        },
                        new
                        {
                            Id = 189,
                            CountryId = 19,
                            Name = "Omsk"
                        },
                        new
                        {
                            Id = 190,
                            CountryId = 19,
                            Name = "Rostov-on-Don"
                        },
                        new
                        {
                            Id = 191,
                            CountryId = 20,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 192,
                            CountryId = 20,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 193,
                            CountryId = 20,
                            Name = "Izmir"
                        },
                        new
                        {
                            Id = 194,
                            CountryId = 20,
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 195,
                            CountryId = 20,
                            Name = "Adana"
                        },
                        new
                        {
                            Id = 196,
                            CountryId = 20,
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 197,
                            CountryId = 20,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 198,
                            CountryId = 20,
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 199,
                            CountryId = 20,
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = 200,
                            CountryId = 20,
                            Name = "Mersin"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Continent")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Geography");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = (byte)5,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Continent = (byte)5,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Continent = (byte)4,
                            Name = "UK"
                        },
                        new
                        {
                            Id = 4,
                            Continent = (byte)4,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 5,
                            Continent = (byte)4,
                            Name = "France"
                        },
                        new
                        {
                            Id = 6,
                            Continent = (byte)6,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 7,
                            Continent = (byte)7,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 8,
                            Continent = (byte)7,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 9,
                            Continent = (byte)3,
                            Name = "China"
                        },
                        new
                        {
                            Id = 10,
                            Continent = (byte)3,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 11,
                            Continent = (byte)3,
                            Name = "India"
                        },
                        new
                        {
                            Id = 12,
                            Continent = (byte)3,
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 13,
                            Continent = (byte)1,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 14,
                            Continent = (byte)1,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 15,
                            Continent = (byte)1,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 16,
                            Continent = (byte)5,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 17,
                            Continent = (byte)4,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 18,
                            Continent = (byte)4,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 19,
                            Continent = (byte)4,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 20,
                            Continent = (byte)3,
                            Name = "Turkey"
                        });
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<byte>("WorkStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCities", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<byte>("WorkStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCountries", "Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DriverLanguages", "Localization");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages", "Localization");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arabic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "French"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spanish"
                        });
                });

            modelBuilder.Entity("Driver", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Car", "Car")
                        .WithOne()
                        .HasForeignKey("Driver", "CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.BodyType", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Entities.CarDetails.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.CarImage", b =>
                {
                    b.HasOne("Mottrist.Domain.Entities.CarDetails.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Destination", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany("Destinations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.DriverInteraction", b =>
                {
                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverInteractions")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithMany("DriverInteractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.Traveler", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.LookupEntities.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId");

                    b.HasOne("Mottrist.Domain.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("Mottrist.Domain.Entities.Traveler", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("PreferredLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCity", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.City", "City")
                        .WithMany("DriverCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverCities")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverCountry", b =>
                {
                    b.HasOne("Mottrist.Domain.LookupEntities.Country", "Country")
                        .WithMany("DriverCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverCountries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.DriverLanguage", b =>
                {
                    b.HasOne("Driver", "Driver")
                        .WithMany("DriverLanguages")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mottrist.Domain.LookupEntities.Language", "Language")
                        .WithMany("DriverLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Driver", b =>
                {
                    b.Navigation("DriverCities");

                    b.Navigation("DriverCountries");

                    b.Navigation("DriverInteractions");

                    b.Navigation("DriverLanguages");
                });

            modelBuilder.Entity("Mottrist.Domain.Entities.CarDetails.Car", b =>
                {
                    b.Navigation("CarImages");
                });

            modelBuilder.Entity("Mottrist.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DriverInteractions");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.City", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("DriverCities");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("DriverCountries");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Mottrist.Domain.LookupEntities.Language", b =>
                {
                    b.Navigation("DriverLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
